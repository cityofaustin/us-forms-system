{"version":3,"sources":["../../../src/js/review/SubmitController.jsx"],"names":["SubmitController","getPreSubmit","required","field","label","error","formConfig","preSubmitInfo","goBack","props","form","pageList","router","expandedPageList","data","push","length","path","handleSubmit","origin","location","replace","nextProps","nextStatus","submission","status","previousStatus","newRoute","urlPrefix","showPreSubmitError","renderErrorMessage","preSubmit","event","setPreSubmit","target","value","React","Component","mapStateToProps","state","ownProps","pagesByChapter","hasAttemptedSubmit","mapDispatchToProps","setSubmission","submitForm","propTypes","PropTypes","object","isRequired","array","func"],"mappings":"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","file":"SubmitController.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport SubmitButtons from './SubmitButtons';\nimport { PreSubmitSection } from '../components/PreSubmitSection';\n// import { isValidForm } from '../validation';\nimport {\n  createPageListByChapter,\n  getActiveExpandedPages\n} from '../helpers';\nimport {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n} from '../actions';\n\nclass SubmitController extends React.Component {\n\n  componentWillReceiveProps(nextProps) {\n    const nextStatus = nextProps.form.submission.status;\n    const previousStatus = this.props.form.submission.status;\n    if (nextStatus !== previousStatus && nextStatus === 'applicationSubmitted') {\n      const newRoute = `${nextProps.formConfig.urlPrefix}confirmation`;\n      this.props.router.push(newRoute);\n    }\n  }\n\n  getPreSubmit = formConfig => {\n    return {\n      required: false,\n      field: 'AGREED',\n      label: 'I agree to the terms and conditions.',\n      error: 'You must accept the agreement before submitting.',\n      ...formConfig.preSubmitInfo\n    };\n  }\n\n  goBack = () => {\n    const {\n      form,\n      pageList,\n      router\n    } = this.props;\n\n    const expandedPageList = getActiveExpandedPages(pageList, form.data);\n\n    // TODO: Fix this bug that assumes there is a confirmation page.\n    // Actually, it assumes the app also doesn't add routes at the end!\n    // A component at this level should not need to know these things!\n    router.push(expandedPageList[expandedPageList.length - 2].path);\n  }\n\n  // handleSubmit = () => {\n  //   const {\n  //     form,\n  //     formConfig,\n  //     pagesByChapter\n  //   } = this.props;\n\n  //   // If a pre-submit agreement is required, make sure it was accepted\n  //   const preSubmit = this.getPreSubmit(formConfig);\n  //   if (preSubmit.required && !form.data[preSubmit.field]) {\n  //     this.props.setSubmission('hasAttemptedSubmit', true);\n  //     // <PreSubmitSection/> is displaying an error for this case\n  //     return;\n  //   }\n\n  //   // Validation errors in this situation are not visible, so we’d\n  //   // like to know if they’re common\n  //   const { isValid, errors } = isValidForm(form, pagesByChapter);\n  //   if (!isValid) {\n  //     const recordEvent = formConfig.recordEvent ?\n  //       formConfig.recordEvent :\n  //       console.log.bind(console);   // eslint-disable-line no-console\n\n  //     recordEvent({ event: 'validation-failed-on-submit', errors });\n  //     this.props.setSubmission('status', 'validationError');\n  //     this.props.setSubmission('hasAttemptedSubmit', true);\n  //     return;\n  //   }\n\n  //   // User accepted if required, and no errors, so submit\n  //   this.props.submitForm(formConfig, form);\n  // }\n\n  handleSubmit = () => {\n    debugger; // eslint-disable-line no-debugger\n    const origin = location.origin;\n    location.replace(origin + '/confirmation'); // eslint-disable-line prefer-template\n  }\n\n  render() {\n    const {\n      form,\n      formConfig,\n      showPreSubmitError,\n      renderErrorMessage\n    } = this.props;\n    const preSubmit = this.getPreSubmit(formConfig);\n\n    return (\n      <div>\n        <PreSubmitSection\n          preSubmitInfo={preSubmit}\n          onChange={(event) => this.props.setPreSubmit(preSubmit.field, event.target.value)}\n          checked={form.data[preSubmit.field]}\n          showError={showPreSubmitError}/>\n        <SubmitButtons\n          onBack={this.goBack}\n          onSubmit={this.handleSubmit}\n          submission={form.submission}\n          renderErrorMessage={renderErrorMessage}/>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    formConfig,\n    pageList,\n    renderErrorMessage\n  } = ownProps;\n  const router = ownProps.router;\n\n  const form = state.form;\n  const pagesByChapter = createPageListByChapter(formConfig);\n  const submission = form.submission;\n  const showPreSubmitError = submission.hasAttemptedSubmit;\n\n  return {\n    form,\n    formConfig,\n    pagesByChapter,\n    pageList,\n    renderErrorMessage,\n    router,\n    submission,\n    showPreSubmitError\n  };\n}\n\nconst mapDispatchToProps = {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n};\n\nSubmitController.propTypes = {\n  form: PropTypes.object.isRequired,\n  formConfig: PropTypes.object.isRequired,\n  pagesByChapter: PropTypes.object.isRequired,\n  pageList: PropTypes.array.isRequired,\n  renderErrorMessage: PropTypes.func,\n  router: PropTypes.object.isRequired,\n  setPreSubmit: PropTypes.func.isRequired,\n  setSubmission: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  submission: PropTypes.object.isRequired\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SubmitController));\n\n// for tests\nexport { SubmitController };\n"]}