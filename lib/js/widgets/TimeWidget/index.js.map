{"version":3,"sources":["../../../../src/js/widgets/TimeWidget/index.jsx"],"names":["TimeWidget","props","state","value","touched","hour","minute","onChange","bind","handleTimeChange","handlePeriodChange","dates","datestring","field","test","length","newState","setState","isIncomplete","period","id","event","target","React","Component","propTypes","PropTypes","string","isRequired","func"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAGA;;;;AACA;;;;;;;;;;AAEA;AACA;AACA;IACqBA,U;;;AACnB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wHACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,aAAO,4BAAUF,MAAME,KAAhB,CADI;AAEXC,eAAS;AACPC,cAAM,KADC;AAEPC,gBAAQ;AAFD;AAFE,KAAb;AAOA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,UAAKE,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBF,IAAxB,OAA1B;AAZiB;AAalB;;;;mCAE+B;AAAA,UAArBG,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,UAAc,QAAdA,UAAc;;AAC9B,WAAKX,KAAL,CAAWM,QAAX,CAAoBK,UAApB;AACD;;;wCAE4B;AAAA,UAAfP,IAAe,SAAfA,IAAe;AAAA,UAATC,MAAS,SAATA,MAAS;;AAC3B,aAAQ,CAACD,IAAD,IAAS,CAACC,MAAlB;AACD;;;qCAEgBO,K,EAAOV,K,EAAO;AAAA;;AAC7B;AACA,UAAKA,UAAU,EAAX,IAAmB,CAAC,QAAQW,IAAR,CAAaX,KAAb,CAApB,IAA6CA,MAAMY,MAAN,IAAgB,CAAjE,EAAqE;AACnE;AACD;AACD,UAAIF,UAAU,MAAd,EAAsB;AACpB,YAAIV,QAAQ,EAAZ,EAAgB;AACd;AACD;AACD,YAAIA,QAAQ,CAAZ,EAAe;AACbA,kBAAQ,EAAR;AACD;AACF;AACD,UAAIU,UAAU,QAAd,EAAwB;AACtB,YAAKV,QAAQ,EAAT,IAAiBA,QAAQ,CAA7B,EAAiC;AAC/B;AACD;AACF;;AAED,UAAIa,WAAW,yBAAU,KAAKd,KAAf,CAAf;AACA,yBAAIc,QAAJ,EAAc,CAAC,OAAD,EAAUH,KAAV,CAAd,EAAgC,mCAAiBV,KAAjB,CAAhC;AACA,yBAAIa,QAAJ,EAAc,CAAC,SAAD,EAAYH,KAAZ,CAAd,EAAkC,IAAlC;;AAEA;AACA,UAAKA,UAAU,MAAX,IAAuB,KAAKX,KAAL,CAAWC,KAAX,CAAiBG,MAAjB,KAA4B,EAAvD,EAA4D;AAC1D,2BAAIU,QAAJ,EAAc,CAAC,OAAD,EAAU,QAAV,CAAd,EAAmC,IAAnC;AACD;;AAED,WAAKC,QAAL,CAAcD,QAAd,EAAwB,YAAM;AAC5B,YAAI,OAAKE,YAAL,CAAkBF,SAASb,KAA3B,CAAJ,EAAuC;AACrC,iBAAKF,KAAL,CAAWM,QAAX;AACD,SAFD,MAEO;AACL,iBAAKN,KAAL,CAAWM,QAAX,CAAoB,6BAAWS,SAASb,KAApB,CAApB;AACD;AACF,OAND;AAOD;;;uCAEkBgB,M,EAAQ;AAAA;;AACzB,UAAIH,WAAW,yBAAU,KAAKd,KAAf,CAAf;AACA,yBAAIc,QAAJ,EAAc,CAAC,OAAD,EAAU,QAAV,CAAd,EAAmCG,MAAnC;;AAEA,WAAKF,QAAL,CAAcD,QAAd,EAAwB,YAAM;AAC5B,YAAI,OAAKE,YAAL,CAAkBF,SAASb,KAA3B,CAAJ,EAAuC;AACrC,iBAAKF,KAAL,CAAWM,QAAX;AACD,SAFD,MAEO;AACL,iBAAKN,KAAL,CAAWM,QAAX,CAAoB,6BAAWS,SAASb,KAApB,CAApB;AACD;AACF,OAND;AAOD;;;6BAEQ;AAAA;;AAAA,UACAiB,EADA,GACM,KAAKnB,KADX,CACAmB,EADA;AAAA,yBAEsB,KAAKlB,KAAL,CAAWC,KAFjC;AAAA,UAEAE,IAFA,gBAEAA,IAFA;AAAA,UAEKC,MAFL,gBAEKA,MAFL;AAAA,UAEYa,MAFZ,gBAEYA,MAFZ;;AAIP;;AACA,aACE;AAAA;AAAA,UAAK,WAAU,uBAAf;AACE;AAAA;AAAA,YAAU,WAAU,eAApB,EAAoC,IAAIC,EAAxC;AACE,wCAAC,mBAAD;AACE,gBAAIA,EADN;AAEE,kBAAM,MAFR;AAGE,sBAAU,KAAKX,gBAHjB;AAIE,mBAAOJ,IAJT;AAKE,mBAAO;AALT,YADF;AAQE,wCAAC,mBAAD;AACE,gBAAIe,EADN;AAEE,kBAAM,QAFR;AAGE,sBAAU,KAAKX,gBAHjB;AAIE,mBAAOH,MAJT;AAKE,mBAAO;AALT,YARF;AAeE;AAAA;AAAA,cAAK,WAAU,2DAAf;AACE;AAAA;AAAA,gBAAO,WAAU,gBAAjB,EAAkC,SAAYc,EAAZ,iBAAlC;AAAA;AAAA,aADF;AAEE;AAAA;AAAA;AACE,2BAAU,kBADZ,EAC+B,MAASA,EAAT,iBAD/B,EAC0D,IAAOA,EAAP,iBAD1D;AAEE,0BAAU;AAAA,yBAAS,OAAKV,kBAAL,CAAwBW,MAAMC,MAAN,CAAanB,KAArC,CAAT;AAAA;AAFZ;AAIE;AAAA;AAAA,kBAAQ,OAAM,IAAd;AAAA;AAAA,eAJF;AAKE;AAAA;AAAA,kBAAQ,OAAM,IAAd;AAAA;AAAA;AALF;AAFF;AAfF;AADF,OADF;AA8BD;;;;EA7GqCoB,gBAAMC,S;;kBAAzBxB,U;;;AAgHrBA,WAAWyB,SAAX,GAAuB;AACrBL,MAAIM,oBAAUC,MAAV,CAAiBC,UADA;AAErBrB,YAAUmB,oBAAUG,IAAV,CAAeD,UAFJ;AAGrBzB,SAAOuB,oBAAUC;AAHI,CAAvB","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { set, cloneDeep } from 'lodash';\n\nimport TimeInput from './TimeInput.js';\nimport {formatHourMinute, parseTime, formatTime} from './timeHelpers';\n\n// Returns datestring in the form \"2011-11-11\"\n// Uses parts of us-form-system's DateWidget. Includes a Calendar date picker.\n// ref: https://github.com/cityofaustin/us-forms-system/blob/master/src/js/widgets/DateWidget.jsx\nexport default class TimeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: parseTime(props.value),\n      touched: {\n        hour: false,\n        minute: false,\n      },\n    }\n    this.onChange = this.onChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handlePeriodChange = this.handlePeriodChange.bind(this);\n  }\n\n  onChange({ dates, datestring }) {\n    this.props.onChange(datestring);\n  }\n\n  isIncomplete({hour, minute}) {\n    return (!hour || !minute)\n  }\n\n  handleTimeChange(field, value) {\n    // Only allow integer values\n    if ((value !== \"\") && (!/^\\d+$/.test(value)) && (value.length <= 2)) {\n      return\n    }\n    if (field === \"hour\") {\n      if (value > 12) {\n        return\n      }\n      if (value < 1) {\n        value = \"\";\n      }\n    }\n    if (field === \"minute\") {\n      if ((value > 59) || (value < 0)) {\n        return\n      }\n    }\n\n    let newState = cloneDeep(this.state);\n    set(newState, [\"value\", field], formatHourMinute(value));\n    set(newState, ['touched', field], true);\n\n    // Autofill minute after filling hour\n    if ((field === \"hour\") && (this.state.value.minute === \"\")) {\n      set(newState, ['value', \"minute\"], \"00\");\n    }\n\n    this.setState(newState, () => {\n      if (this.isIncomplete(newState.value)) {\n        this.props.onChange();\n      } else {\n        this.props.onChange(formatTime(newState.value));\n      }\n    });\n  }\n\n  handlePeriodChange(period) {\n    let newState = cloneDeep(this.state);\n    set(newState, [\"value\", \"period\"], period);\n\n    this.setState(newState, () => {\n      if (this.isIncomplete(newState.value)) {\n        this.props.onChange();\n      } else {\n        this.props.onChange(formatTime(newState.value));\n      }\n    });\n  }\n\n  render() {\n    const {id} = this.props;\n    const {hour,minute,period} = this.state.value;\n\n    // <span> state time: {formatTime({hour,minute,period})} </span><br/>\n    return (\n      <div className=\"time-widget-container\">\n        <fieldset className='date-fieldset' id={id}>\n          <TimeInput\n            id={id}\n            type={\"Hour\"}\n            onChange={this.handleTimeChange}\n            value={hour}\n            label={\"Hour\"}\n          />\n          <TimeInput\n            id={id}\n            type={\"Minute\"}\n            onChange={this.handleTimeChange}\n            value={minute}\n            label={\"Minute\"}\n          />\n          <div className=\"usa-datefield usa-form-group time-period-select-container\">\n            <label className=\"hidden-content\" htmlFor={`${id}_time_of_day`}>Time of Day</label>\n            <select\n              className=\"usa-input-inline\" name={`${id}_time_of_day`} id={`${id}_time_of_day`}\n              onChange={event => this.handlePeriodChange(event.target.value)}\n            >\n              <option value=\"am\">am</option>\n              <option value=\"pm\">pm</option>\n            </select>\n          </div>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nTimeWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string\n};\n"]}