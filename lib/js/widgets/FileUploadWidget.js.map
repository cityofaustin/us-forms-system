{"version":3,"sources":["../../../src/js/widgets/FileUploadWidget.jsx"],"names":["FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginFileValidateSize","FileUploadWidget","endpoint","props","uniqueid","crypto","createHmac","uuid","v4","digest","state","uniqueIdentifier","files","fileList","filesUpdated","bind","console","log","fieldName","file","metadata","load","error","progress","abort","formData","FormData","fileSignature","getFileSignatureFromList","fields","Object","keys","key","append","request","XMLHttpRequest","open","url","upload","onprogress","e","lengthComputable","loaded","total","onload","status","responseText","send","params","query","filter","k","undefined","map","encodeURIComponent","join","indexOf","res","push","value","length","JSON","stringify","f","creds","onChange","setState","fetch","withQuery","toLowerCase","then","json","catch","parseSignatureResponse","retrieveFileSignature","filename","i","currentFile","splice","uploadedFileName","name","fileItems","fileItem","pond","ref","process","handleProcessing","handleInit","handleFileAdded","handleRemoveFile","Component"],"mappings":";;;;;;;;AAAA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AAQA;;;;AACA;;;;;;;;;;;;;;AAPA,mCACEA,4CADF,EAEEC,oCAFF,EAGEC,wCAHF;;AASA;AACA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AACrC;AAAA;;AACE,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAEjB,UAAMC,WAAWC,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,eAAKC,EAAL,EAA5B,EAAuCC,MAAvC,CAA8C,KAA9C,CAAjB;AACA,YAAKC,KAAL,GAAa;AACXC,0BAAkBP,QADP;AAEXQ,eAAO,EAFI;AAGXC,kBAAU;AAHC,OAAb;;AAMA,YAAKA,QAAL,GAAgB,EAAhB;;AAEA,YAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAXiB;AAYlB;;AAbH;AAAA;AAAA,mCAee;AACXC,gBAAQC,GAAR,CAAY,oCAAZ;AACD;AAjBH;AAAA;AAAA,uCAmBmBC,SAnBnB,EAmB8BC,IAnB9B,EAmBoCC,QAnBpC,EAmB8CC,IAnB9C,EAmBoDC,KAnBpD,EAmB2DC,QAnB3D,EAmBqEC,MAnBrE,EAmB4E;AACxE;AACA;AACA,YAAMC,WAAW,IAAIC,QAAJ,EAAjB;;AAEA;;AAEA,YAAMC,gBAAgB,KAAKC,wBAAL,CAA8BT,IAA9B,CAAtB;AACA,YAAIU,SAAS,EAAb;;AAEA,YAAIF,iBAAiB,IAArB,EAA2B;AACzBX,kBAAQC,GAAR,CAAY,mDAAZ;AACD;;AAED,YAAI;AACFY,mBAASC,OAAOC,IAAP,CAAYJ,cAAcE,MAA1B,CAAT;AACD,SAFD,CAEE,OAAOP,KAAP,EAAc;AACdO,mBAAS,EAAT;AACAb,kBAAQC,GAAR,CAAY,SAAZ;AACAD,kBAAQC,GAAR,CAAYK,KAAZ;AACD;;AApBuE;AAAA;AAAA;;AAAA;AAsBxE,+BAAkBO,MAAlB,8HAA0B;AAAA,gBAAfG,GAAe;;AACxBP,qBAASQ,MAAT,CAAgBD,GAAhB,EAAqBL,cAAcE,MAAd,CAAqBG,GAArB,CAArB;AACD;AAxBuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BxEP,iBAASQ,MAAT,CAAgB,MAAhB,EAAwBd,IAAxB,EAA8BQ,cAAcE,MAAd,CAAqBG,GAAnD;;AAEA,YAAME,UAAU,IAAIC,cAAJ,EAAhB;;AAEAD,gBAAQE,IAAR,CAAa,MAAb,EAAqBT,cAAcU,GAAnC;;AAEA;AACA;AACAH,gBAAQI,MAAR,CAAeC,UAAf,GAA4B,aAAK;AAC/BhB,mBAASiB,EAAEC,gBAAX,EAA6BD,EAAEE,MAA/B,EAAuCF,EAAEG,KAAzC;AACD,SAFD;;AAIA;AACA;AACA;AACAT,gBAAQU,MAAR,GAAiB,YAAY;AAC3B,cAAIV,QAAQW,MAAR,IAAkB,GAAlB,IAAyBX,QAAQW,MAAR,GAAiB,GAA9C,EAAmD;AACjD;AACAxB,iBAAKa,QAAQY,YAAb;AACD,WAHD,MAGO;AACL;AACAxB,kBAAM,OAAN;AACD;AACF,SARD;;AAUAY,gBAAQa,IAAR,CAAatB,QAAb;;AAEA;AACA,eAAO;AACLD,iBAAO,iBAAM;AACX;AACAU,oBAAQV,KAAR;;AAEA;AACAA;AACD;AAPI,SAAP;AASD;AAlFH;AAAA;AAAA,gCAoFYa,GApFZ,EAoFiBW,MApFjB,EAoFyB;AACrB,YAAMC,QAAQnB,OAAOC,IAAP,CAAYiB,MAAZ,EACXE,MADW,CACJ;AAAA,iBAAKF,OAAOG,CAAP,MAAcC,SAAnB;AAAA,SADI,EAEXC,GAFW,CAEP;AAAA,iBAAQC,mBAAmBH,CAAnB,CAAR,SAAiCG,mBAAmBN,OAAOG,CAAP,CAAnB,CAAjC;AAAA,SAFO,EAGXI,IAHW,CAGN,GAHM,CAAd;AAIAlB,eAAO,CAACA,IAAImB,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAjC,IAAwCP,KAA/C;AACA,eAAOZ,GAAP;AACD;AA3FH;AAAA;AAAA,6CA6FyBoB,GA7FzB,EA6F8B;AAC1B,aAAK5C,QAAL,CAAc6C,IAAd,CAAmBD,GAAnB;;AAEA,YAAIE,QAAQ,KAAZ;;AAEA,YAAI;AACFA,kBAAQ,KAAK9C,QAAL,CAAc+C,MAAd,GACJC,KAAKC,SAAL,CAAe,KAAKjD,QAAL,CAAcwC,GAAd,CAAkB;AAAA,wBAAQU,EAAEC,KAAF,CAAQnC,MAAR,CAAeG,GAAvB;AAAA,WAAlB,CAAf,CADI,GAEJ,KAFJ;AAGD,SAJD,CAIE,OAAOV,KAAP,EAAc;AACdN,kBAAQM,KAAR,CAAc,kCAAd;AACAN,kBAAQM,KAAR,CAAcA,KAAd;AACAqC,kBAAQ,KAAR;AACD;;AAED,aAAKxD,KAAL,CAAW8D,QAAX,CAAoBN,KAApB;;AAEA,aAAKO,QAAL,CAAc;AACZrD,iDAAc,KAAKA,QAAnB;AADY,SAAd;AAGD;AAjHH;AAAA;AAAA,4CAmHwBmB,GAnHxB,EAmH6BrB,gBAnH7B,EAmH+C;AAAA;;AAC3C,YAAMc,WAAW,IAAIC,QAAJ,EAAjB;;AAEAD,iBAASQ,MAAT,CAAgB,KAAhB,EAAuBD,GAAvB;AACAP,iBAASQ,MAAT,CAAgB,UAAhB,EAA4BtB,gBAA5B;;AAEAwD,cAAM,KAAKC,SAAL,CAAkBlE,QAAlB,iCAAwD;AAC5DiB,gBAAMa,GADsD;AAE5D5B,oBAAUO,iBAAiB0D,WAAjB;AAFkD,SAAxD,CAAN,EAIGC,IAJH,CAIQ;AAAA,iBAAOb,IAAIc,IAAJ,EAAP;AAAA,SAJR,EAKGC,KALH,CAKS;AAAA,iBAASxD,QAAQM,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAT;AAAA,SALT,EAMGgD,IANH,CAMQ,eAAO;AACX,iBAAKG,sBAAL,CAA4BhB,GAA5B;AACD,SARH;AASD;AAlIH;AAAA;AAAA,sCAoIkBnC,KApIlB,EAoIyBH,IApIzB,EAoI+B;AAC3B,aAAKuD,qBAAL,CAA2BvD,KAAKwD,QAAhC,EAA0C,KAAKjE,KAAL,CAAWC,gBAArD;AACD;AAtIH;AAAA;AAAA,uCAwImBQ,IAxInB,EAwIyB;AACrB,aAAK,IAAMyD,CAAX,IAAgB,KAAK/D,QAArB,EAA+B;AAC7B,cAAMgE,cAAc,KAAKhE,QAAL,CAAc+D,CAAd,CAApB;AACA,cAAIC,YAAYF,QAAZ,KAAyBxD,KAAKwD,QAAlC,EAA4C;AAC1C;AACA,iBAAK9D,QAAL,CAAciE,MAAd,CAAqBF,CAArB,EAAwB,CAAxB;AACA,iBAAKV,QAAL,CAAc;AACZrD,qDAAc,KAAKA,QAAnB;AADY,aAAd;AAGD;AACF;AACF;AAnJH;AAAA;AAAA,+CAqJ2BM,IArJ3B,EAqJiC;AAC7B,YAAM4D,mBAAmB5D,KAAK6D,IAAL,IAAa,EAAtC;;AAEA,aAAK,IAAMJ,CAAX,IAAgB,KAAK/D,QAArB,EAA+B;AAC7B,cAAMgE,cAAc,KAAKhE,QAAL,CAAc+D,CAAd,CAApB;AACA,cAAIC,YAAYF,QAAZ,KAAyBI,gBAA7B,EAA+C;AAC7C;AACA,gBAAMf,QAAQ,KAAKnD,QAAL,CAAc+D,CAAd,EAAiBZ,KAA/B;AACA,mBAAOA,KAAP;AACD;AACF;AACD;AACA,eAAO,IAAP;AACD;AAlKH;AAAA;AAAA,yCAoK8B;AAAA,YAAbiB,SAAa,QAAbA,SAAa;;AAC1B;AACA,aAAKf,QAAL,CAAc;AACZtD,iBAAOqE,UAAU5B,GAAV,CAAc;AAAA,mBAAY6B,SAAS/D,IAArB;AAAA,WAAd;AADK,SAAd;AAGD;AAzKH;AAAA;AAAA,+BA2KW;AAAA;;AACP,eACE;AAAA;AAAA;AACE;AAAA;AAAA;AAEE;AAAC,qCAAD;AAAA;AACE,qBAAK;AAAA,yBAAQ,OAAKgE,IAAL,GAAYC,KAApB;AAAA,iBADP;AAEE,mCAFF;AAGE,6CAHF;;AAKE,0BAAU,GALZ;AAME,6BAAY;;AAEZ;AARF,kBASE,QAAQ;AACNC,2BAAS,KAAKC,gBAAL,CAAsBvE,IAAtB,CAA2B,IAA3B;AADH,iBATV;AAYE,wBAAQ;AAAA,yBAAM,OAAKwE,UAAL,EAAN;AAAA;AACR;AAbF,kBAcE,WAAW,mBAACjE,KAAD,EAAQH,IAAR;AAAA,yBAAiB,OAAKqE,eAAL,CAAqBlE,KAArB,EAA4BH,IAA5B,CAAjB;AAAA;AACX;AAfF,kBAgBE,cAAc;AAAA,yBAAQ,OAAKsE,gBAAL,CAAsBtE,IAAtB,CAAR;AAAA,iBAhBhB;AAiBE,+BAAe;AAAA,yBAAa,OAAKL,YAAL,CAAkB,EAAEmE,oBAAF,EAAlB,CAAb;AAAA,iBAjBjB;AAmBG,mBAAKvE,KAAL,CAAWE,KAAX,CAAiByC,GAAjB,CAAqB;AAAA,uBACpB,8BAAC,mBAAD,IAAM,KAAKlC,IAAX,EAAiB,KAAKA,IAAtB,EAA4B,QAAO,OAAnC,GADoB;AAAA,eAArB;AAnBH;AAFF;AADF,SADF;AA8BD;AA1MH;;AAAA;AAAA,IAAsCuE,gBAAtC;AA4MD,CA7MD;;kBA+MezF,gB","file":"FileUploadWidget.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { FilePond, File, registerPlugin } from 'react-filepond';\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\n\nregisterPlugin(\n  FilePondPluginImageExifOrientation,\n  FilePondPluginImagePreview,\n  FilePondPluginFileValidateSize\n);\n\nimport crypto from 'crypto';\nimport uuid from 'uuid';\n\n// Plug in process.env.FORM_API_URL as endpoint to FileUploadWidget\nconst FileUploadWidget = (endpoint) => {\n  return class FileUploadWidget extends Component {\n    constructor(props) {\n      super(props);\n      const uniqueid = crypto.createHmac('sha256', uuid.v4()).digest('hex');\n      this.state = {\n        uniqueIdentifier: uniqueid,\n        files: [],\n        fileList: [],\n      };\n\n      this.fileList = [];\n\n      this.filesUpdated = this.filesUpdated.bind(this);\n    }\n\n    handleInit() {\n      console.log('FilePond instance has initialised.');\n    }\n\n    handleProcessing(fieldName, file, metadata, load, error, progress, abort) {\n      // fieldName is the name of the input field\n      // file is the actual file object to send\n      const formData = new FormData();\n\n      // First, find the S3 signature data from this.state.fileList\n\n      const fileSignature = this.getFileSignatureFromList(file);\n      let fields = [];\n\n      if (fileSignature == null) {\n        console.log('The file signature for file could not be located.');\n      }\n\n      try {\n        fields = Object.keys(fileSignature.fields);\n      } catch (error) {\n        fields = [];\n        console.log('Error: ');\n        console.log(error);\n      }\n\n      for (const key of fields) {\n        formData.append(key, fileSignature.fields[key]);\n      }\n\n      formData.append('file', file, fileSignature.fields.key);\n\n      const request = new XMLHttpRequest();\n\n      request.open('POST', fileSignature.url);\n\n      // Should call the progress method to update the progress to 100% before calling load\n      // Setting computable to false switches the loading indicator to infinite mode\n      request.upload.onprogress = e => {\n        progress(e.lengthComputable, e.loaded, e.total);\n      };\n\n      // Should call the load method when done and pass the returned server file id\n      // this server file id is then used later on when reverting or restoring a file\n      // so your server knows which file to return without exposing that info to the client\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 300) {\n          // the load method accepts either a string (id) or an object\n          load(request.responseText);\n        } else {\n          // Can call the error method if something is wrong, should exit after\n          error('oh no');\n        }\n      };\n\n      request.send(formData);\n\n      // Should expose an abort method so the request can be cancelled\n      return {\n        abort: () => {\n          // This function is entered if the user has tapped the cancel button\n          request.abort();\n\n          // Let FilePond know the request has been cancelled\n          abort();\n        }\n      };\n    }\n\n    withQuery(url, params) {\n      const query = Object.keys(params)\n        .filter(k => params[k] !== undefined)\n        .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n        .join('&');\n      url += (url.indexOf('?') === -1 ? '?' : '&') + query;\n      return url;\n    }\n\n    parseSignatureResponse(res) {\n      this.fileList.push(res);\n\n      let value = false;\n\n      try {\n        value = this.fileList.length\n          ? JSON.stringify(this.fileList.map(f => `${f.creds.fields.key}`))\n          : false;\n      } catch (error) {\n        console.error('parseSignatureResponse() Error: ');\n        console.error(error);\n        value = false;\n      }\n\n      this.props.onChange(value);\n\n      this.setState({\n        fileList: [...this.fileList],\n      });\n    }\n\n    retrieveFileSignature(key, uniqueIdentifier) {\n      const formData = new FormData();\n\n      formData.append('key', key);\n      formData.append('uniqueid', uniqueIdentifier);\n\n      fetch(this.withQuery(`${endpoint}/uploads/request-signature`, {\n        file: key,\n        uniqueid: uniqueIdentifier.toLowerCase()\n      }))\n        .then(res => res.json())\n        .catch(error => console.error('Error:', error))\n        .then(res => {\n          this.parseSignatureResponse(res);\n        });\n    }\n\n    handleFileAdded(error, file) {\n      this.retrieveFileSignature(file.filename, this.state.uniqueIdentifier);\n    }\n\n    handleRemoveFile(file) {\n      for (const i in this.fileList) {\n        const currentFile = this.fileList[i];\n        if (currentFile.filename === file.filename) {\n          // console.log(`Removing: ${file.filename} at index: ${i}`);\n          this.fileList.splice(i, 1);\n          this.setState({\n            fileList: [...this.fileList],\n          });\n        }\n      }\n    }\n\n    getFileSignatureFromList(file) {\n      const uploadedFileName = file.name || '';\n\n      for (const i in this.fileList) {\n        const currentFile = this.fileList[i];\n        if (currentFile.filename === uploadedFileName) {\n          // console.log(`getFileSignatureFromList() Item found at index: ${i}`);\n          const creds = this.fileList[i].creds;\n          return creds;\n        }\n      }\n      // If not found, return null\n      return null;\n    }\n\n    filesUpdated({ fileItems }) {\n      // Set current file objects to this.state\n      this.setState({\n        files: fileItems.map(fileItem => fileItem.file),\n      });\n    }\n\n    render() {\n      return (\n        <div>\n          <header>\n            {/* // Then we need to pass FilePond properties as attributes */}\n            <FilePond\n              ref={ref => (this.pond = ref)}\n              allowMultiple\n              allowFileSizeValidation\n\n              maxFiles={100}\n              maxFileSize=\"20000MB\"\n\n              /* FilePond allows a custom process to handle uploads */\n              server={{\n                process: this.handleProcessing.bind(this),\n              }}\n              oninit={() => this.handleInit()}\n              /* OnAddFile we are going to request a token for that file, and update a dictionary with the tokens */\n              onaddfile={(error, file) => this.handleFileAdded(error, file)}\n              /* OnRemoveFile we are going to find the file in the list and splice it (remove it) */\n              onremovefile={file => this.handleRemoveFile(file)}\n              onupdatefiles={fileItems => this.filesUpdated({ fileItems })}>\n              {/* Update current files  */}\n              {this.state.files.map(file => (\n                <File key={file} src={file} origin=\"local\"/>\n              ))}\n            </FilePond>\n          </header>\n        </div>\n      );\n    }\n  }\n}\n\nexport default FileUploadWidget;\n"]}