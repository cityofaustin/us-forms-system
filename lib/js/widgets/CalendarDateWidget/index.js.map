{"version":3,"sources":["../../../../src/js/widgets/CalendarDateWidget/index.jsx"],"names":["CalendarDateWidget","options","props","state","value","touched","month","day","year","onChange","bind","handleFormChange","handleFlatpickrChange","validation","dates","datestring","Date","field","currentYear","getFullYear","newState","formatter","formatYear","formatDayMonth","autofillYear","setState","isIncomplete","dateString","id","flatpickrDate","undefined","flatpickrOptions","dateFormat","wrap","allowInput","enableTime","maxDate","minDate","event","target","Component","propTypes","PropTypes","string","isRequired","func"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;;;;;;;AAEA;;;;;;;;;AASA,IAAMA,qBAAqB,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtC;AAAA;;AAEE,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA,0IACXA,KADW;;AAGjB,YAAKC,KAAL,GAAa;AACXC,eAAO,+BAAa,MAAKF,KAAL,CAAWE,KAAxB,CADI;AAEXC,iBAAS;AACPC,iBAAO,KADA;AAEPC,eAAK,KAFE;AAGPC,gBAAM;AAHC;AAFE,OAAb;AAQA,YAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,YAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;AACA,YAAKE,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BF,IAA3B,OAA7B;;AAEA,YAAKG,UAAL,GAAkBZ,QAAQY,UAA1B;AAfiB;AAgBlB;;AAlBH;AAAA;AAAA,qCAoBkC;AAAA,YAArBC,KAAqB,QAArBA,KAAqB;AAAA,YAAdC,UAAc,QAAdA,UAAc;;AAC9B,aAAKb,KAAL,CAAWO,QAAX,CAAoBM,UAApB;AACD;AAtBH;AAAA;AAAA,0CAwBqC;AAAA,YAApBT,KAAoB,SAApBA,KAAoB;AAAA,YAAbC,GAAa,SAAbA,GAAa;AAAA,YAARC,IAAQ,SAARA,IAAQ;;AACjC,YAAI,CAACF,KAAD,IAAU,CAACC,GAAX,IAAkB,CAACC,IAAvB,EAA6B;AAC3B,iBAAO,IAAP;AACD,SAFD,MAEO,IACJ,KAAKK,UAAL,KAAoB,UAArB,IACC,sBAAQ,IAAIG,IAAJ,CAASR,IAAT,EAAeF,QAAQ,CAAvB,EAA0BC,GAA1B,CAAR,EAAwC,IAAIS,IAAJ,EAAxC,CAFI,EAGL;AACA,iBAAO,IAAP;AACD,SALM,MAKA,IACJ,KAAKH,UAAL,KAAoB,YAArB,IACC,uBAAS,IAAIG,IAAJ,CAASR,IAAT,EAAeF,QAAQ,CAAvB,EAA0BC,GAA1B,CAAT,EAAyC,IAAIS,IAAJ,EAAzC,CAFI,EAGL;AACA,iBAAO,IAAP;AACD,SALM,MAKA;AACL,iBAAO,KAAP;AACD;AACF;AAxCH;AAAA;AAAA,uCA0CmBC,KA1CnB,EA0C0Bb,KA1C1B,EA0CiC;AAAA;;AAC7B,YAAMc,cAAe,IAAIF,IAAJ,EAAD,CAAaG,WAAb,EAApB;;AAEA,YAAIF,UAAU,OAAd,EAAuB;AACrB,cAAKb,QAAQ,EAAb,EAAkB;AAChB;AACD;AACD,cAAIA,QAAQ,CAAZ,EAAe;AACbA,oBAAQ,EAAR;AACD;AACF;AACD,YAAIa,UAAU,KAAd,EAAqB;AACnB,cAAIb,QAAQ,EAAZ,EAAgB;AACd;AACD;AACD,cAAIA,QAAQ,CAAZ,EAAe;AACbA,oBAAQ,EAAR;AACD;AACF;AACD,YAAIa,UAAU,MAAd,EAAsB;AACpB,cAAK,KAAKJ,UAAL,IAAmB,UAApB,IAAoCT,QAAQc,WAAhD,EAA8D;AAC5Dd,oBAAQc,WAAR;AACD,WAFD,MAEO,IAAK,KAAKL,UAAL,IAAmB,YAApB,IAAsCT,QAAQc,WAAlD,EAAgE;AACrE;AACD;AACD,cAAId,QAAQ,CAAZ,EAAe;AACbA,oBAAQ,EAAR;AACD;AACF;;AAED,YAAIgB,WAAW,yBAAU,KAAKjB,KAAf,CAAf;AACA,YAAMkB,YAAaJ,UAAU,MAAX,GAAqBK,uBAArB,GAAkCC,2BAApD;;AAEA,2BAAIH,QAAJ,EAAc,CAAC,OAAD,EAAUH,KAAV,CAAd,EAAgCI,UAAUjB,KAAV,CAAhC;AACA,2BAAIgB,QAAJ,EAAc,CAAC,SAAD,EAAYH,KAAZ,CAAd,EAAkC,IAAlC;;AAEA;AACA,YACE,CACIA,UAAU,KAAX,IAAsB,CAAC,CAAC,KAAKd,KAAL,CAAWC,KAAX,CAAiBE,KAA1C,IACEW,UAAU,OAAX,IAAwB,CAAC,CAAC,KAAKd,KAAL,CAAWC,KAAX,CAAiBG,GAF9C,KAGM,CAAC,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,IAJ1B,EAKE;AACA,cAAIgB,eAAeN,WAAnB;AACA,cAAI,KAAKL,UAAL,IAAmB,UAAvB,EAAmC;AACjCW,2BAAe,mCAAiBJ,QAAjB,CAAf;AACD,WAFD,MAEO,IAAI,KAAKP,UAAL,IAAmB,YAAvB,EAAqC;AAC1CW,2BAAe,qCAAmBJ,QAAnB,CAAf;AACD;AACD,6BAAIA,QAAJ,EAAc,CAAC,OAAD,EAAU,MAAV,CAAd,EAAiCI,YAAjC;AACD;;AAED;AACA,YACE,CAAC,CAACJ,SAAShB,KAAT,CAAeI,IAAjB,IACA,CAAC,CAACY,SAAShB,KAAT,CAAeG,GADjB,IAEA,CAAC,CAACa,SAAShB,KAAT,CAAeE,KAHnB,EAIE;AACAc,qBAAW,+BAAaA,QAAb,EAAuB,KAAKP,UAA5B,CAAX;AACD;;AAED,aAAKY,QAAL,CAAcL,QAAd,EAAwB,YAAM;AAC5B,cAAI,OAAKM,YAAL,CAAkBN,SAAShB,KAA3B,CAAJ,EAAuC;AACrC,mBAAKF,KAAL,CAAWO,QAAX;AACD,WAFD,MAEO;AACL,mBAAKP,KAAL,CAAWO,QAAX,CAAoB,uCAAqBW,SAAShB,KAA9B,CAApB;AACD;AACF,SAND;AAOD;AA9GH;AAAA;AAAA,4CAgHwBuB,UAhHxB,EAgHoC;AAAA;;AAChC,YAAIP,WAAW,yBAAU,KAAKjB,KAAf,CAAf;AACA,2BAAIiB,QAAJ,EAAc,OAAd,EAAuB,+BAAaO,UAAb,CAAvB;AACA,2BAAIP,QAAJ,EAAc,SAAd,EAAyB,EAACd,OAAO,IAAR,EAAcC,KAAK,IAAnB,EAAyBC,MAAM,IAA/B,EAAzB;;AAEA,aAAKiB,QAAL,CAAcL,QAAd,EAAwB,YAAM;AAC5B,cAAI,OAAKM,YAAL,CAAkBN,SAAShB,KAA3B,CAAJ,EAAuC;AACrC,mBAAKF,KAAL,CAAWO,QAAX;AACD,WAFD,MAEO;AACL,mBAAKP,KAAL,CAAWO,QAAX,CAAoB,uCAAqBW,SAAShB,KAA9B,CAApB;AACD;AACF,SAND;AAOD;AA5HH;AAAA;AAAA,+BA8HW;AAAA;;AAAA,YACAwB,EADA,GACM,KAAK1B,KADX,CACA0B,EADA;AAAA,2BAEoB,KAAKzB,KAAL,CAAWC,KAF/B;AAAA,YAEAE,KAFA,gBAEAA,KAFA;AAAA,YAEOC,GAFP,gBAEOA,GAFP;AAAA,YAEYC,IAFZ,gBAEYA,IAFZ;;AAGP,YAAMqB,gBAAiBvB,SAASC,GAAT,IAAgBC,IAAjB,GACpB,uCAAqB,EAACF,YAAD,EAAOC,QAAP,EAAWC,UAAX,EAArB,CADoB,GACqBsB,SAD3C;;AAGA,YAAMC,mBAAmB;AACvBC,sBAAY,OADW;AAEvBC,gBAAM,IAFiB;AAGvBC,sBAAY,KAHW;AAIvBC,sBAAY;AAJW,SAAzB;AAMA,YAAI,KAAKtB,UAAL,IAAmB,UAAvB,EAAmC;AACjCkB,2BAAiBK,OAAjB,GAA2B,OAA3B;AACD,SAFD,MAEO,IAAI,KAAKvB,UAAL,IAAmB,YAAvB,EAAqC;AAC1CkB,2BAAiBM,OAAjB,GAA2B,OAA3B;AACD;;AAED,eACE;AAAA;AAAA,YAAK,WAAU,uBAAf;AAEE;AAAA;AAAA,cAAK,WAAU,8BAAf;AACE;AAAA;AAAA,gBAAU,WAAU,eAApB,EAAoC,IAAIT,EAAxC;AACE;AAAA;AAAA,kBAAK,WAAU,mBAAf;AACE;AAAA;AAAA,oBAAK,WAAU,mDAAf;AACE;AAAA;AAAA,sBAAO,WAAU,gCAAjB,EAAkD,SAAYA,EAAZ,WAAlD;AAAA;AAAA,mBADF;AAEE;AACE,+BAAU,kBADZ,EAC+B,IAAOA,EAAP,WAD/B,EACkD,MAASA,EAAT,WADlD;AAEE,0BAAK,QAFP,EAEgB,KAAI,GAFpB,EAEwB,KAAI,IAF5B,EAEiC,OAAOtB,KAFxC;AAGE,8BAAU,kBAACgC,KAAD;AAAA,6BAAW,OAAK3B,gBAAL,CAAsB,OAAtB,EAA+B2B,MAAMC,MAAN,CAAanC,KAA5C,CAAX;AAAA;AAHZ;AAFF,iBADF;AASE;AAAA;AAAA,oBAAK,WAAU,iDAAf;AACE;AAAA;AAAA,sBAAO,WAAU,gCAAjB,EAAkD,SAAYwB,EAAZ,SAAlD;AAAA;AAAA,mBADF;AAEE;AACE,+BAAU,kBADZ,EAC+B,IAAOA,EAAP,SAD/B,EACgD,MAASA,EAAT,SADhD;AAEE,0BAAK,QAFP,EAEgB,KAAI,GAFpB,EAEwB,KAAI,IAF5B,EAEiC,OAAOrB,GAFxC;AAGE,8BAAU,kBAAC+B,KAAD;AAAA,6BAAW,OAAK3B,gBAAL,CAAsB,KAAtB,EAA6B2B,MAAMC,MAAN,CAAanC,KAA1C,CAAX;AAAA;AAHZ;AAFF,iBATF;AAiBE;AAAA;AAAA,oBAAK,WAAU,0EAAf;AACE;AAAA;AAAA,sBAAO,WAAU,gCAAjB,EAAkD,SAAYwB,EAAZ,UAAlD;AAAA;AAAA,mBADF;AAEE;AACE,+BAAU,kBADZ,EAC+B,IAAOA,EAAP,UAD/B,EACiD,MAASA,EAAT,UADjD;AAEE,0BAAK,QAFP,EAEgB,KAAI,MAFpB,EAE2B,OAAOpB,IAFlC;AAGE,8BAAU,kBAAC8B,KAAD;AAAA,6BAAW,OAAK3B,gBAAL,CAAsB,MAAtB,EAA8B2B,MAAMC,MAAN,CAAanC,KAA3C,CAAX;AAAA;AAHZ;AAFF,iBAjBF;AAyBE;AAAA;AAAA,oBAAK,mBAAL,EAAiB,WAAU,kDAA3B;AACE;AAAC,4CAAD;AAAA;AACE,+BAAS2B,gBADX;AAEE,6BAAOF,aAFT;AAGE,gCAAU,kBAACf,KAAD,EAAQC,UAAR;AAAA,+BAAuB,OAAKH,qBAAL,CAA2BG,UAA3B,CAAvB;AAAA;AAHZ;AAKE;AAAA;AAAA,wBAAO,WAAU,gBAAjB,EAAkC,SAAYa,EAAZ,cAAlC;AAAA;AAAA,qBALF;AAME,6DAAO,WAAU,4BAAjB,EAA8C,UAAS,IAAvD,EAA4D,MAAK,MAAjE,EAAwE,kBAAxE,EAAmF,MAASA,EAAT,cAAnF,EAA2G,IAAOA,EAAP,cAA3G,GANF;AAOE;AAAA;AAAA,wBAAM,WAAU,mDAAhB,EAAoE,OAAM,QAA1E,EAAmF,mBAAnF;AACE;AAAA;AAAA,0BAAG,WAAU,uCAAb;AAAA;AAAA;AADF;AAPF;AADF;AAzBF;AADF;AADF;AAFF,SADF;AAgDD;AAhMH;;AAAA;AAAA,IAAwCY,gBAAxC;;AAmMAxC,qBAAmByC,SAAnB,GAA+B;AAC7Bb,QAAIc,oBAAUC,MAAV,CAAiBC,UADQ;AAE7BnC,cAAUiC,oBAAUG,IAAV,CAAeD,UAFI;AAG7BxC,WAAOsC,oBAAUC;AAHY,GAA/B;AAKD,CAzMD;;kBA2Me3C,kB","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Flatpickr from 'react-flatpickr';\nimport { set, cloneDeep } from 'lodash';\nimport { isAfter, isBefore } from 'date-fns';\n\nimport {formatYear, formatDayMonth, parseISODate, formatISOPartialDate, setValidDate, autofillYearPast, autofillYearFuture} from './dateHelpers';\n\n/**\n  Returns datestring in the form '2011-11-22'\n  Uses parts of us-form-system's DateWidget. Includes a Calendar date picker.\n  ref: https://github.com/cityofaustin/us-forms-system/blob/master/src/js/widgets/DateWidget.jsx\n\n  @param options.validation:\n    \"pastOnly\": only allow dates set in the past\n    \"futureOnly\": only allow dates set in the future\n**/\nconst CalendarDateWidget = (options) => {\n  return class CalendarDateWidget extends Component {\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        value: parseISODate(this.props.value),\n        touched: {\n          month: false,\n          day: false,\n          year: false,\n        },\n      };\n      this.onChange = this.onChange.bind(this);\n      this.handleFormChange = this.handleFormChange.bind(this);\n      this.handleFlatpickrChange = this.handleFlatpickrChange.bind(this);\n\n      this.validation = options.validation;\n    }\n\n    onChange({ dates, datestring }) {\n      this.props.onChange(datestring);\n    }\n\n    isIncomplete({ month, day, year }) {\n      if (!month || !day || !year) {\n        return true\n      } else if (\n        (this.validation === 'pastOnly') &&\n        (isAfter(new Date(year, month - 1, day), new Date()))\n      ) {\n        return true\n      } else if (\n        (this.validation === 'futureOnly') &&\n        (isBefore(new Date(year, month - 1, day), new Date()))\n      ) {\n        return true\n      } else {\n        return false\n      }\n    }\n\n    handleFormChange(field, value) {\n      const currentYear = (new Date()).getFullYear();\n\n      if (field === 'month') {\n        if ((value > 12)) {\n          return\n        }\n        if (value < 1) {\n          value = '';\n        }\n      }\n      if (field === 'day') {\n        if (value > 31) {\n          return\n        }\n        if (value < 1) {\n          value = '';\n        }\n      }\n      if (field === 'year') {\n        if ((this.validation == \"pastOnly\") && (value > currentYear)) {\n          value = currentYear;\n        } else if ((this.validation == \"futureOnly\") && (value < currentYear)) {\n          // value = currentYear;\n        }\n        if (value < 1) {\n          value = '';\n        }\n      }\n\n      let newState = cloneDeep(this.state);\n      const formatter = (field === 'year') ? formatYear : formatDayMonth;\n\n      set(newState, ['value', field], formatter(value));\n      set(newState, ['touched', field], true);\n\n      // Autofill year after filling month and day\n      if (\n        (\n          ((field === 'day') && (!!this.state.value.month)) ||\n          ((field === 'month') && (!!this.state.value.day))\n        ) && (!this.state.value.year)\n      ) {\n        let autofillYear = currentYear;\n        if (this.validation == \"pastOnly\") {\n          autofillYear = autofillYearPast(newState)\n        } else if (this.validation == \"futureOnly\") {\n          autofillYear = autofillYearFuture(newState)\n        }\n        set(newState, ['value', 'year'], autofillYear);\n      }\n\n      // If all 3 values are filled out, make sure they are a valid day\n      if (\n        !!newState.value.year &&\n        !!newState.value.day &&\n        !!newState.value.month\n      ) {\n        newState = setValidDate(newState, this.validation);\n      }\n\n      this.setState(newState, () => {\n        if (this.isIncomplete(newState.value)) {\n          this.props.onChange();\n        } else {\n          this.props.onChange(formatISOPartialDate(newState.value));\n        }\n      });\n    }\n\n    handleFlatpickrChange(dateString) {\n      let newState = cloneDeep(this.state);\n      set(newState, 'value', parseISODate(dateString));\n      set(newState, 'touched', {month: true, day: true, year: true});\n\n      this.setState(newState, () => {\n        if (this.isIncomplete(newState.value)) {\n          this.props.onChange();\n        } else {\n          this.props.onChange(formatISOPartialDate(newState.value));\n        }\n      })\n    }\n\n    render() {\n      const {id} = this.props;\n      const {month, day, year} = this.state.value;\n      const flatpickrDate = (month && day && year) ?\n        formatISOPartialDate({month,day,year}) : undefined;\n\n      const flatpickrOptions = {\n        dateFormat: 'Y-m-d',\n        wrap: true,\n        allowInput: false,\n        enableTime: false,\n      }\n      if (this.validation == \"pastOnly\") {\n        flatpickrOptions.maxDate = 'today';\n      } else if (this.validation == \"futureOnly\") {\n        flatpickrOptions.minDate = 'today';\n      }\n\n      return (\n        <div className=\"date-widget-container\">\n\n          <div className=\"date-widget-values-container\">\n            <fieldset className=\"date-fieldset\" id={id}>\n              <div className=\"usa-date-of-birth\">\n                <div className=\"usa-datefield usa-form-group usa-form-group-month\">\n                  <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Month`}>Month</label>\n                  <input\n                    className=\"usa-input-inline\" id={`${id}_Month`} name={`${id}_Month`}\n                    type=\"number\" min=\"1\" max=\"12\" value={month}\n                    onChange={(event) => this.handleFormChange('month', event.target.value)}\n                  />\n                </div>\n                <div className=\"usa-datefield usa-form-group usa-form-group-day\">\n                  <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Day`}>Day</label>\n                  <input\n                    className=\"usa-input-inline\" id={`${id}_Day`} name={`${id}_Day`}\n                    type=\"number\" min=\"1\" max=\"31\" value={day}\n                    onChange={(event) => this.handleFormChange('day', event.target.value)}\n                  />\n                </div>\n                <div className=\"usa-datefield usa-form-group usa-form-group-year usa-form-group-year-fix\">\n                  <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Year`}>Year</label>\n                  <input\n                    className=\"usa-input-inline\" id={`${id}_Year`} name={`${id}_Year`}\n                    type=\"number\" min=\"1900\" value={year}\n                    onChange={(event) => this.handleFormChange('year', event.target.value)}\n                  />\n                </div>\n                <div aria-hidden className=\"usa-datefield usa-form-group flatpickr-container\">\n                  <Flatpickr\n                    options={flatpickrOptions}\n                    value={flatpickrDate}\n                    onChange={(dates, datestring) => this.handleFlatpickrChange(datestring)}\n                  >\n                    <label className=\"hidden-content\" htmlFor={`${id}_calendar`}>Calendar</label>\n                    <input className=\"hidden-flatpickr-input-box\" tabIndex=\"-1\" type=\"text\" data-input name={`${id}_calendar`} id={`${id}_calendar`}/>\n                    <span className=\"usa-input-inline flatpickr-input-button-container\" title=\"toggle\" data-toggle>\n                      <i className=\"material-icons flatpickr-input-button\">event</i>\n                    </span>\n                  </Flatpickr>\n                </div>\n              </div>\n            </fieldset>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  CalendarDateWidget.propTypes = {\n    id: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n  };\n}\n\nexport default CalendarDateWidget;\n"]}