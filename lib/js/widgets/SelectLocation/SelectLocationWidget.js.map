{"version":3,"sources":["../../../../src/js/widgets/SelectLocation/SelectLocationWidget.js"],"names":["MapboxGl","MapboxGeocoder","require","Map","accessToken","geocoderControl","placeholder","bbox","limit","trackProximity","HERE_APP_ID","HERE_APP_CODE","SelectLocationMap","props","state","center","showPin","onStyleLoad","bind","onMoveEnd","onDragStart","onDragEnd","prevProps","lat","lng","setState","map","getCenter","locationUpdated","lngLat","zoomControl","NavigationControl","addControl","dragRotate","disable","touchZoomRotate","disableRotation","addSource","type","data","features","addLayer","id","source","paint","on","event","getSource","setData","result","geometry","updateGeocoderProximity","getZoom","wrap","setProximity","longitude","latitude","resize","pinDrop","Component","getSuggestions","inputValue","value","trim","toLowerCase","inputLength","length","languages","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","SelectLocationWidget","suggestions","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","getCurrentPosition","address","fetch","then","response","status","console","log","location","position","valueJSON","JSON","stringify","json","Response","View","Result","Location","Address","Label","setInput","newValue","schema","formData","parse","newLocation","newValueJSON","suggestionValue","suggestionIndex","sectionIndex","method","autosuggestInput","blur","filteredResults","results","vicinity","title","humanAddress","replace","catch","err","window","navigator","geolocation","coords","enableHighAccuracy","inputProps","React"],"mappings":"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","file":"SelectLocationWidget.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport * as MapboxGl from 'mapbox-gl';\n\nimport Autosuggest from 'react-autosuggest';\n\n//importing the geocoder didnt seem to work at first\nconst MapboxGeocoder = require('@mapbox/mapbox-gl-geocoder');\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiY3Jvd2VhdHgiLCJhIjoiY2o1NDFvYmxkMHhkcDMycDF2a3pseDFpZiJ9.UcnizcFDleMpv5Vbv8Rngw',\n});\n\nconst geocoderControl = new MapboxGeocoder({\n  accessToken:\n    'pk.eyJ1IjoiY3Jvd2VhdHgiLCJhIjoiY2o1NDFvYmxkMHhkcDMycDF2a3pseDFpZiJ9.UcnizcFDleMpv5Vbv8Rngw',\n  placeholder: 'Enter a location here',\n\n  // bounding box restricts results to Travis County\n  bbox: [-98.173053, 30.02329, -97.369564, 30.627918],\n  // or texas\n  // bbox: [65,25.84,-93.51,36.5],\n  // or by country:\n  // countries: 'us',\n  limit: 5,\n  trackProximity: true,\n});\n\nconst HERE_APP_ID = `R3EtGwWQmTKG5eVeyLV8`;\nconst HERE_APP_CODE = `8aDkNeOzfxGFkOKm9fER0A`;\n\nclass SelectLocationMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: [-97.7460479736328, 30.266184073558826],\n      showPin: true,\n    };\n    this.onStyleLoad = this.onStyleLoad.bind(this);\n    this.onMoveEnd = this.onMoveEnd.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.lat != prevProps.lat || this.props.lng != prevProps.lng) {\n      this.setState({\n        showPin: true,\n      });\n    }\n  }\n\n  toggleMenu() {\n    this.setState({\n      showPin: !this.state.showPin,\n    });\n  }\n\n  onDragStart(map) {\n    // debugger;\n    this.setState({\n      showPin: false,\n    });\n  }\n\n  onDragEnd(map) {\n    // this.toggleMenu();\n  }\n\n  onMoveEnd(map) {\n    const center = map.getCenter();\n    this.props.locationUpdated({ lngLat: center });\n  }\n\n  onStyleLoad(map) {\n    const zoomControl = new MapboxGl.NavigationControl();\n\n    map.addControl(zoomControl, 'bottom-right');\n\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n\n    map.addSource('geojson-point', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [],\n      },\n    });\n\n    map.addLayer({\n      id: 'geocoded-point',\n      source: 'geojson-point',\n      type: 'circle',\n      paint: {\n        'circle-radius': 10,\n        'circle-color': '#007cbf',\n      },\n    });\n\n    map.addControl(geocoderControl, 'top-left');\n\n    // using mapbox geocoder's event listener to show result\n    // this ought to be linked up with or replace previous code\n    geocoderControl.on('result', function(event) {\n      map.getSource('geojson-point').setData(event.result.geometry);\n    });\n\n    map.on('load', updateGeocoderProximity); // set proximity on map load\n    map.on('moveend', updateGeocoderProximity); // and then update proximity each time the map moves\n\n    function updateGeocoderProximity() {\n      // proximity is designed for local scale, if the user is looking at the whole world,\n      // it doesn't make sense to factor in the arbitrary centre of the map\n      if (map.getZoom() > 9) {\n        var center = map.getCenter().wrap(); // ensures the longitude falls within -180 to 180 as the Geocoding API doesn't accept values outside this range\n        geocoderControl.setProximity({\n          longitude: center.lng,\n          latitude: center.lat,\n        });\n      } else {\n        geocoderControl.setProximity(null);\n      }\n    }\n\n    map.resize();\n  }\n\n  render() {\n    const { lat, lng } = this.props;\n    const pinDrop = this.state.showPin ? 'show' : 'hide';\n\n    return (\n      <Map\n        style={'mapbox://styles/croweatx/cjow5d6cd3l7g2snrvf17wf0r'}\n        center={[lng, lat]}\n        onStyleLoad={this.onStyleLoad}\n        onDragStart={this.onDragStart}\n        onMoveEnd={this.onMoveEnd}\n      >\n        <Layer\n          type=\"symbol\"\n          id=\"selectedLocation\"\n          layout={{\n            'icon-image': 'marker-open-small',\n            'icon-allow-overlap': true,\n          }}\n        >\n          {/*\n          <Feature\n            coordinates={[lng, lat]}\n            draggable={true}\n            onMoveEnd={this.props.locationUpdated}\n          /> */}\n        </Layer>\n\n        <div className={`pin ${pinDrop}`} />\n        <div className=\"pulse\" />\n      </Map>\n    );\n  }\n}\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : languages.filter(\n        lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue,\n      );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => {\n  return suggestion.name;\n};\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\nexport default class SelectLocationWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suggestions: [],\n    };\n\n    this.locationUpdated = this.locationUpdated.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(\n      this,\n    );\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(\n      this,\n    );\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n    this.getCurrentPosition = this.getCurrentPosition.bind(this);\n  }\n\n  locationUpdated({ lngLat }) {\n    var address = 'Dropped Pin';\n\n    // Use here reverse geocoding to get a human readable address for the pin\n    fetch(`\n      https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?prox=${\n        lngLat.lat\n      }%2C${\n      lngLat.lng\n    }%2C250&mode=retrieveAddresses&maxresults=1&gen=9&app_id=${HERE_APP_ID}&app_code=${HERE_APP_CODE}`).then(\n      response => {\n        if (response.status !== 200) {\n          console.log(\n            'Looks like there was a problem. Status Code: ' + response.status,\n          );\n\n          const location = {\n            address: address,\n            position: lngLat,\n          };\n\n          const valueJSON = JSON.stringify(location);\n\n          this.props.onChange(valueJSON);\n\n          return;\n        }\n\n        response.json().then(data => {\n          address = data.Response.View[0].Result[0].Location.Address.Label;\n\n          const location = {\n            address: address,\n            position: lngLat,\n          };\n\n          const valueJSON = JSON.stringify(location);\n          geocoderControl.setInput(location.address);\n          this.props.onChange(valueJSON);\n        });\n      },\n    );\n  }\n\n  onChange(event, { newValue }) {\n    // Keep our current location until we pick a suggestion\n    const valueJSON = this.props.value\n      ? this.props.value\n      : this.props.schema.formData;\n    const location = JSON.parse(valueJSON);\n\n    const newLocation = {\n      address: newValue,\n      position: location.position,\n    };\n\n    const newValueJSON = JSON.stringify(newLocation);\n\n    this.props.onChange(newValueJSON);\n  }\n\n  onSuggestionSelected(\n    event,\n    { suggestion, suggestionValue, suggestionIndex, sectionIndex, method },\n  ) {\n    if (suggestion.location) {\n      const address = suggestionValue;\n      const lng = suggestion.location[1];\n      const lat = suggestion.location[0];\n\n      const location = {\n        address: address,\n        position: { lng: lng, lat: lat },\n      };\n\n      const valueJSON = JSON.stringify(location);\n\n      this.props.onChange(valueJSON);\n    }\n\n    // Unfocus the search bar\n    this.autosuggestInput.blur();\n  }\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  onSuggestionsFetchRequested({ value }) {\n    const inputLength = value.length;\n\n    if (inputLength > 2) {\n      const valueJSON = this.props.value\n        ? this.props.value\n        : this.props.schema.formData;\n      const location = JSON.parse(valueJSON);\n\n      fetch(\n        `https://places.api.here.com/places/v1/autosuggest?at=${\n          location.position.lat\n        },${\n          location.position.lng\n        }&q=${value}&app_id=${HERE_APP_ID}&app_code=${HERE_APP_CODE}`,\n      )\n        .then(response => {\n          if (response.status !== 200) {\n            console.log(\n              'Looks like there was a problem. Status Code: ' + response.status,\n            );\n            this.setState({ suggestions: [] });\n            return;\n          }\n\n          response.json().then(data => {\n            const filteredResults = data.results.filter(\n              result => result.position && result.vicinity,\n            );\n            const suggestions = filteredResults.map(result => ({\n              name: result.title,\n              location: result.position,\n              humanAddress: result.vicinity.replace(/<br\\/>/g, ', '),\n            }));\n            this.setState({ suggestions: suggestions });\n          });\n        })\n        .catch(err => {\n          console.log('Fetch Error :-S', err);\n          this.setState({ suggestions: [] });\n        });\n    } else {\n      this.setState({ suggestions: [] });\n    }\n  }\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested() {\n    this.setState({\n      suggestions: [],\n      value: '',\n    });\n  }\n\n  getCurrentPosition() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        const lngLat = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n\n        this.locationUpdated({ lngLat });\n      },\n      error => {\n        debugger;\n      },\n      { enableHighAccuracy: true },\n    );\n  }\n\n  render() {\n    const valueJSON = this.props.value\n      ? this.props.value\n      : this.props.schema.formData;\n    const location = JSON.parse(valueJSON);\n\n    const inputProps = {\n      value: location.address,\n      onChange: this.onChange,\n    };\n\n    return (\n      <div>\n        <div className=\"map-container\">\n          <SelectLocationMap\n            lat={location.position.lat}\n            lng={location.position.lng}\n            locationUpdated={this.locationUpdated}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]}