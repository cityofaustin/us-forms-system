{"version":3,"sources":["../../../src/js/review/ArrayField.jsx"],"names":["Element","Scroll","scroller","ArrayField","props","arrayData","Array","isArray","state","items","editing","map","handleAdd","bind","handleSave","handleSetData","scrollToTop","scrollToRow","isLocked","newProps","newState","length","setState","index","schema","additionalItems","setTimeout","scrollTo","path","window","Forms","scroll","duration","delay","smooth","offset","id","status","concat","getItemSchema","undefined","definitions","indexToRemove","formData","filter","val","setData","data","newArray","newEditingArray","uiSchema","pageTitle","formContext","uiOptions","fieldName","title","reviewTitle","arrayPageConfig","pageKey","itemCountLocked","itemsNeeded","minItems","itemName","item","isLast","isEditing","showReviewButton","itemSchema","itemTitle","onBlur","handleEdit","handleRemove","React","Component","propTypes","PropTypes","object","isRequired","string","array"],"mappings":"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","file":"ArrayField.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'lodash/fp';\nimport Scroll from 'react-scroll';\n\nimport { getDefaultFormState } from '@department-of-veterans-affairs/react-jsonschema-form/lib/utils';\n\nimport SchemaForm from '../components/SchemaForm';\nimport { focusElement } from '../utilities/ui';\n\nconst Element = Scroll.Element;\nconst scroller = Scroll.scroller;\n\n/* Growable table (Array) field on the Review page\n *\n * The idea here is that, because our pattern for growable tables on the review\n * page is that each item can be in review or edit mode, we will treat each item\n * as its own form page and this component will handle the edit/review states and\n * make sure data is properly updated in the Redux store\n */\nclass ArrayField extends React.Component {\n  constructor(props) {\n    super(props);\n    // In contrast to the normal array field, we donâ€™t want to add an empty item\n    // and always show at least one item on the review page\n    const arrayData = Array.isArray(props.arrayData) ? props.arrayData : null;\n    this.state = {\n      items: arrayData || [],\n      editing: (this.props.arrayData || []).map(() => false)\n    };\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleSetData = this.handleSetData.bind(this);\n    this.scrollToTop = this.scrollToTop.bind(this);\n    this.scrollToRow = this.scrollToRow.bind(this);\n    this.isLocked = this.isLocked.bind(this);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.arrayData !== this.props.arrayData) {\n      const arrayData = Array.isArray(newProps.arrayData)\n        ? newProps.arrayData\n        : [];\n      const newState = {\n        items: arrayData\n      };\n      if (arrayData.length !== this.state.items.length) {\n        newState.editing = arrayData.map(() => false);\n      }\n\n      this.setState(newState);\n    }\n  }\n\n  getItemSchema(index) {\n    const schema = this.props.schema;\n    if (schema.items.length > index) {\n      return schema.items[index];\n    }\n\n    return schema.additionalItems;\n  }\n\n  scrollToTop() {\n    setTimeout(() => {\n      // Hacky; wonâ€™t work if the array field is used in two pages and one isnâ€™t\n      //  a BasicArrayField nor if the array field is used in three pages.\n      scroller.scrollTo(\n        `topOfTable_${this.props.path[this.props.path.length - 1]}${\n          this.isLocked() ? '_locked' : ''\n        }`,\n        window.Forms.scroll || {\n          duration: 500,\n          delay: 0,\n          smooth: true,\n          offset: -60\n        }\n      );\n    }, 100);\n  }\n\n  scrollToRow(id) {\n    setTimeout(() => {\n      scroller.scrollTo(\n        `table_${id}`,\n        window.Forms.scroll || {\n          duration: 500,\n          delay: 0,\n          smooth: true,\n          offset: 0\n        }\n      );\n    }, 100);\n  }\n\n  /*\n   * Clicking edit on the item in review mode\n   */\n  handleEdit(index, status = true) {\n    this.setState(_.set(['editing', index], status, this.state), () => {\n      const id = `${this.props.path[this.props.path.length - 1]}_${index}`;\n      this.scrollToRow(id);\n      focusElement(`#table_${id}`);\n    });\n  }\n\n  /*\n   * Clicking Add Another in the header of the array field section\n   */\n  handleAdd() {\n    const newState = {\n      items: this.state.items.concat(\n        getDefaultFormState(\n          this.getItemSchema(this.state.items.length),\n          undefined,\n          this.props.schema.definitions\n        ) || {}\n      ),\n      editing: this.state.editing.concat(true)\n    };\n    this.setState(newState, () => {\n      this.scrollToRow(\n        `${this.props.path[this.props.path.length - 1]}_${this.state.items\n          .length - 1}`\n      );\n    });\n  }\n\n  /*\n   * Clicking Remove when editing an item\n   */\n  handleRemove(indexToRemove) {\n    const { path, formData } = this.props;\n    const newState = _.assign(this.state, {\n      items: this.state.items.filter((val, index) => index !== indexToRemove),\n      editing: this.state.editing.filter(\n        (val, index) => index !== indexToRemove\n      )\n    });\n    this.setState(newState, () => {\n      this.props.setData(_.set(path, this.state.items, formData));\n      this.scrollToTop();\n    });\n  }\n\n  /*\n   * Called on any form data change.\n   *\n   * When data is changed, since weâ€™re only editing one array item at a time,\n   * we need to update the full pageâ€™s form data and call the Redux setData action\n   */\n  handleSetData(index, data) {\n    const { path, formData } = this.props;\n    const newArray = _.set(index, data, this.state.items);\n    this.setState({ items: newArray }, () => {\n      this.props.setData(_.set(path, newArray, formData));\n    });\n  }\n\n  /*\n   * Clicking Update in edit mode.\n   *\n   * This is only called if the form is valid\n   * and data is already saved through handleSetData, so we just need to change\n   * the edting state\n   */\n  handleSave(index) {\n    const newEditingArray = _.set(index, false, this.state.editing);\n    this.setState({ editing: newEditingArray }, () => {\n      this.scrollToTop();\n    });\n  }\n\n  isLocked() {\n    return this.props.uiSchema['ui:field'] === 'BasicArrayField';\n  }\n\n  render() {\n    const { schema, uiSchema, path, pageTitle, formContext } = this.props;\n\n    const uiOptions = uiSchema['ui:options'] || {};\n    const fieldName = path[path.length - 1];\n    const title =\n      _.get('ui:title', uiSchema) || uiOptions.reviewTitle || pageTitle;\n    const arrayPageConfig = {\n      uiSchema: uiSchema.items,\n      pageKey: fieldName\n    };\n\n    // TODO: Make this better; itâ€™s super hacky for now.\n    const itemCountLocked = this.isLocked();\n    // Make sure we default to an empty array if the item count is locked and no\n    //  arrayData is passed (mysteriously)\n    const items = itemCountLocked\n      ? this.props.arrayData || []\n      : this.state.items;\n    const itemsNeeded = (schema.minItems || 0) > 0 && items.length === 0;\n\n    return (\n      <div className={itemsNeeded ? 'schemaform-review-array-warning' : null}>\n        {title && (\n          <div className=\"form-review-panel-page-header-row\">\n            <h5 className=\"form-review-panel-page-header\">{title}</h5>\n            {itemsNeeded && (\n              <span className=\"schemaform-review-array-warning-icon\"/>\n            )}\n            {!itemCountLocked && (\n              <button\n                type=\"button\"\n                className=\"edit-btn primary-outline\"\n                onClick={() => this.handleAdd()}>\n                Add another {uiOptions.itemName}\n              </button>\n            )}\n          </div>\n        )}\n        <div className=\"usfs-growable usfs-growable-review\">\n          <Element\n            name={`topOfTable_${fieldName}${itemCountLocked ? '_locked' : ''}`}/>\n          {items.map((item, index) => {\n            const isLast = items.length === index + 1;\n            const isEditing = this.state.editing[index];\n            const showReviewButton =\n              !itemCountLocked &&\n              (!schema.minItems || items.length > schema.minItems);\n            const itemSchema = this.getItemSchema(index);\n            const itemTitle = itemSchema ? itemSchema.title : '';\n\n            if (isEditing) {\n              return (\n                <div key={index} className=\"usfs-growable-background\">\n                  <Element name={`table_${fieldName}_${index}`}/>\n                  <div\n                    className=\"row small-collapse schemaform-array-row\"\n                    id={`table_${fieldName}_${index}`}>\n                    <div className=\"small-12 columns usfs-growable-expanded\">\n                      {isLast && uiOptions.itemName && items.length > 1 ? (\n                        <h5>New {uiOptions.itemName}</h5>\n                      ) : null}\n                      <SchemaForm\n                        data={item}\n                        schema={itemSchema}\n                        uiSchema={arrayPageConfig.uiSchema}\n                        title={pageTitle}\n                        hideTitle\n                        name={fieldName}\n                        formContext={formContext}\n                        onBlur={this.props.onBlur}\n                        onChange={data => this.handleSetData(index, data)}\n                        onEdit={() => this.handleEdit(index, !isEditing)}\n                        onSubmit={() => this.handleSave(index)}>\n                        <div className=\"row small-collapse\">\n                          <div className=\"small-6 left columns\">\n                            <button className=\"float-left\">Update</button>\n                          </div>\n                          <div className=\"small-6 right columns\">\n                            {showReviewButton && (\n                              <button\n                                type=\"button\"\n                                className=\"usa-button-secondary float-right\"\n                                onClick={() => this.handleRemove(index)}>\n                                Remove\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      </SchemaForm>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n            return (\n              <div key={index} className=\"usfs-growable-background\">\n                <div className=\"row small-collapse\">\n                  <SchemaForm\n                    reviewMode\n                    data={item}\n                    schema={itemSchema}\n                    uiSchema={arrayPageConfig.uiSchema}\n                    title={itemTitle}\n                    name={fieldName}\n                    onChange={data => this.handleSetData(index, data)}\n                    onEdit={() => this.handleEdit(index, !isEditing)}\n                    onSubmit={() => this.handleSave(index)}>\n                    <div/>\n                  </SchemaForm>\n                </div>\n              </div>\n            );\n          })}\n          {itemsNeeded && (\n            <div className=\"usa-alert usa-alert-warning usa-alert-no-color usa-alert-mini\">\n              <div className=\"usa-alert-body\">\n                {_.get('ui:errorMessages.minItems', uiSchema) ||\n                  'You need to add at least one item.'}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayField;\n\nArrayField.propTypes = {\n  schema: PropTypes.object.isRequired,\n  uiSchema: PropTypes.object,\n  pageKey: PropTypes.string.isRequired,\n  path: PropTypes.array.isRequired,\n  formData: PropTypes.object,\n  arrayData: PropTypes.array,\n  pageTitle: PropTypes.string\n};\n"]}