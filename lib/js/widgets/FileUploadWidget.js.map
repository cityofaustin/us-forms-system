{"version":3,"sources":["../../../src/js/widgets/FileUploadWidget.jsx"],"names":["FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginFileValidateSize","endpoint","process","env","API_URL","FileUploadWidget","props","uniqueid","crypto","createHmac","uuid","v4","digest","state","uniqueIdentifier","files","fileList","filesUpdated","bind","console","log","fieldName","file","metadata","load","error","progress","abort","formData","FormData","fileSignature","getFileSignatureFromList","fields","Object","keys","key","append","request","XMLHttpRequest","open","upload","onprogress","e","lengthComputable","loaded","total","onload","status","responseText","send","url","params","query","filter","k","undefined","map","encodeURIComponent","join","indexOf","res","push","value","length","JSON","stringify","f","creds","onChange","setState","fetch","withQuery","toLowerCase","then","json","catch","parseSignatureResponse","retrieveFileSignature","filename","i","currentFile","splice","uploadedFileName","name","fileItems","fileItem","pond","ref","handleProcessing","handleInit","handleFileAdded","handleRemoveFile","Component"],"mappings":";;;;;;;;AAAA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AAQA;;;;AACA;;;;;;;;;;;;;;AAPA,mCACEA,4CADF,EAEEC,oCAFF,EAGEC,wCAHF;;AASA,IAAMC,WAAWC,QAAQC,GAAR,CAAYC,OAA7B;;IAEMC,gB;;;AACJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACXA,KADW;;AAEf,QAAMC,WAAWC,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,eAAKC,EAAL,EAA5B,EAAuCC,MAAvC,CAA8C,KAA9C,CAAjB;AACA,UAAKC,KAAL,GAAa;AACXC,wBAAkBP,QADP;AAEXQ,aAAO,EAFI;AAGXC,gBAAU;AAHC,KAAb;;AAMA,UAAKA,QAAL,GAAgB,EAAhB;;AAEA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAXe;AAYlB;;;;iCAEY;AACXC,cAAQC,GAAR,CAAY,oCAAZ;AACD;;;qCAEgBC,S,EAAWC,I,EAAMC,Q,EAAUC,I,EAAMC,K,EAAOC,Q,EAAUC,M,EAAO;AACxE;AACA;AACA,UAAMC,WAAW,IAAIC,QAAJ,EAAjB;;AAEA;;AAEA,UAAIC,gBAAgB,KAAKC,wBAAL,CAA8BT,IAA9B,CAApB;AACA,UAAIU,SAAS,EAAb;;AAEA,UAAIF,iBAAiB,IAArB,EAA2B;AACzBX,gBAAQC,GAAR,CAAY,mDAAZ;AACD;;AAED,UAAI;AACFY,iBAASC,OAAOC,IAAP,CAAYJ,cAAc,QAAd,CAAZ,CAAT;AACD,OAFD,CAEE,OAAOL,KAAP,EAAc;AACdO,iBAAS,EAAT;AACAb,gBAAQC,GAAR,CAAY,SAAZ;AACAD,gBAAQC,GAAR,CAAYK,KAAZ;AACD;;AApBuE;AAAA;AAAA;;AAAA;AAsBxE,6BAAkBO,MAAlB,8HAA0B;AAAA,cAAfG,GAAe;;AACxBP,mBAASQ,MAAT,CAAgBD,GAAhB,EAAqBL,cAAc,QAAd,EAAwBK,GAAxB,CAArB;AACD;AAxBuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BxEP,eAASQ,MAAT,CAAgB,MAAhB,EAAwBd,IAAxB,EAA8BQ,cAAc,QAAd,EAAwB,KAAxB,CAA9B;;AAEA,UAAMO,UAAU,IAAIC,cAAJ,EAAhB;;AAEAD,cAAQE,IAAR,CAAa,MAAb,EAAqBT,cAAc,KAAd,CAArB;;AAEA;AACA;AACAO,cAAQG,MAAR,CAAeC,UAAf,GAA4B,aAAK;AAC/Bf,iBAASgB,EAAEC,gBAAX,EAA6BD,EAAEE,MAA/B,EAAuCF,EAAEG,KAAzC;AACD,OAFD;;AAIA;AACA;AACA;AACAR,cAAQS,MAAR,GAAiB,YAAW;AAC1B,YAAIT,QAAQU,MAAR,IAAkB,GAAlB,IAAyBV,QAAQU,MAAR,GAAiB,GAA9C,EAAmD;AACjD;AACAvB,eAAKa,QAAQW,YAAb;AACD,SAHD,MAGO;AACL;AACAvB,gBAAM,OAAN;AACD;AACF,OARD;;AAUAY,cAAQY,IAAR,CAAarB,QAAb;;AAEA;AACA,aAAO;AACLD,eAAO,iBAAM;AACX;AACAU,kBAAQV,KAAR;;AAEA;AACAA;AACD;AAPI,OAAP;AASD;;;8BAESuB,G,EAAKC,M,EAAQ;AACrB,UAAIC,QAAQnB,OAAOC,IAAP,CAAYiB,MAAZ,EACTE,MADS,CACF;AAAA,eAAKF,OAAOG,CAAP,MAAcC,SAAnB;AAAA,OADE,EAETC,GAFS,CAEL;AAAA,eAAKC,mBAAmBH,CAAnB,IAAwB,GAAxB,GAA8BG,mBAAmBN,OAAOG,CAAP,CAAnB,CAAnC;AAAA,OAFK,EAGTI,IAHS,CAGJ,GAHI,CAAZ;AAIAR,aAAO,CAACA,IAAIS,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,GAA0B,GAA1B,GAAgC,GAAjC,IAAwCP,KAA/C;AACA,aAAOF,GAAP;AACD;;;2CAEsBU,G,EAAK;AAC1B,WAAK5C,QAAL,CAAc6C,IAAd,CAAmBD,GAAnB;;AAEA,UAAIE,QAAQ,KAAZ;;AAEA,UAAI;AACFA,gBAAQ,KAAK9C,QAAL,CAAc+C,MAAd,GACJC,KAAKC,SAAL,CAAe,KAAKjD,QAAL,CAAcwC,GAAd,CAAkB;AAAA,sBAAQU,EAAEC,KAAF,CAAQnC,MAAR,CAAeG,GAAvB;AAAA,SAAlB,CAAf,CADI,GAEJ,KAFJ;AAGD,OAJD,CAIE,OAAMV,KAAN,EAAa;AACbN,gBAAQC,GAAR,CAAY,kCAAZ;AACAD,gBAAQC,GAAR,CAAYK,KAAZ;AACAqC,gBAAQ,KAAR;AACD;;AAED,WAAKxD,KAAL,CAAW8D,QAAX,CAAoBN,KAApB;;AAEA,WAAKO,QAAL,CAAc;AACZrD,+CAAc,KAAKA,QAAnB;AADY,OAAd;AAGD;;;0CAEsBmB,G,EAAKrB,gB,EAAkB;AAAA;;AAC5C,UAAIc,WAAW,IAAIC,QAAJ,EAAf;;AAEAD,eAASQ,MAAT,CAAgB,KAAhB,EAAuBD,GAAvB;AACAP,eAASQ,MAAT,CAAgB,UAAhB,EAA4BtB,gBAA5B;;AAEAwD,YAAM,KAAKC,SAAL,CAAetE,WAAW,4BAA1B,EAAwD;AAC5DqB,cAAMa,GADsD;AAE5D5B,kBAAUO,iBAAiB0D,WAAjB;AAFkD,OAAxD,CAAN,EAICC,IAJD,CAIM;AAAA,eAAOb,IAAIc,IAAJ,EAAP;AAAA,OAJN,EAKCC,KALD,CAKO;AAAA,eAASxD,QAAQM,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAT;AAAA,OALP,EAMCgD,IAND,CAMM,eAAO;AACX,eAAKG,sBAAL,CAA4BhB,GAA5B;AACD,OARD;AASD;;;oCAEenC,K,EAAOH,I,EAAM;AAC3B,WAAKuD,qBAAL,CAA2BvD,KAAKwD,QAAhC,EAA0C,KAAKjE,KAAL,CAAWC,gBAArD;AACD;;;qCAEgBQ,I,EAAM;AACrB,WAAK,IAAIyD,CAAT,IAAc,KAAK/D,QAAnB,EAA6B;AAC3B,YAAIgE,cAAc,KAAKhE,QAAL,CAAc+D,CAAd,CAAlB;AACA,YAAIC,YAAY,UAAZ,MAA4B1D,KAAKwD,QAArC,EAA+C;AAC7C3D,kBAAQC,GAAR,CAAY,eAAeE,KAAKwD,QAApB,GAA+B,aAA/B,GAA+CC,CAA3D;AACA,eAAK/D,QAAL,CAAciE,MAAd,CAAqBF,CAArB,EAAwB,CAAxB;AACA,eAAKV,QAAL,CAAc;AACZrD,mDAAc,KAAKA,QAAnB;AADY,WAAd;AAGD;AACF;AACF;;;6CAEwBM,I,EAAM;AAC7B,UAAI4D,mBAAmB5D,KAAK6D,IAAL,IAAa,EAApC;;AAEA,WAAK,IAAIJ,CAAT,IAAc,KAAK/D,QAAnB,EAA6B;AAC3B,YAAIgE,cAAc,KAAKhE,QAAL,CAAc+D,CAAd,CAAlB;AACA,YAAIC,YAAY,UAAZ,MAA4BE,gBAAhC,EAAkD;AAChD/D,kBAAQC,GAAR,CAAY,qDAAqD2D,CAAjE;AACA,cAAIZ,QAAQ,KAAKnD,QAAL,CAAc+D,CAAd,EAAiB,OAAjB,CAAZ;AACA,iBAAOZ,KAAP;AACD;AACF;AACD;AACA,aAAO,IAAP;AACD;;;uCAE2B;AAAA,UAAbiB,SAAa,QAAbA,SAAa;;AAC1B;AACA,WAAKf,QAAL,CAAc;AACZtD,eAAOqE,UAAU5B,GAAV,CAAc;AAAA,iBAAY6B,SAAS/D,IAArB;AAAA,SAAd;AADK,OAAd;AAGD;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA;AACE;AAAA;AAAA;AAEE;AAAC,mCAAD;AAAA;AACE,mBAAK;AAAA,uBAAQ,OAAKgE,IAAL,GAAYC,KAApB;AAAA,eADP;AAEE,6BAAe,IAFjB;AAGE,uCAAyB,IAH3B;;AAKE,wBAAU,GALZ;AAME,2BAAY;;AAEZ;AARF,gBASE,QAAQ;AACNrF,yBAAS,KAAKsF,gBAAL,CAAsBtE,IAAtB,CAA2B,IAA3B;AADH,eATV;AAYE,sBAAQ;AAAA,uBAAM,OAAKuE,UAAL,EAAN;AAAA;AACR;AAbF,gBAcE,WAAW,mBAAChE,KAAD,EAAQH,IAAR;AAAA,uBAAiB,OAAKoE,eAAL,CAAqBjE,KAArB,EAA4BH,IAA5B,CAAjB;AAAA;AACX;AAfF,gBAgBE,cAAc;AAAA,uBAAQ,OAAKqE,gBAAL,CAAsBrE,IAAtB,CAAR;AAAA,eAhBhB;AAiBE,6BAAe;AAAA,uBAAa,OAAKL,YAAL,CAAkB,EAAEmE,oBAAF,EAAlB,CAAb;AAAA;AAjBjB;AAoBG,iBAAKvE,KAAL,CAAWE,KAAX,CAAiByC,GAAjB,CAAqB;AAAA,qBACpB,8BAAC,mBAAD,IAAM,KAAKlC,IAAX,EAAiB,KAAKA,IAAtB,EAA4B,QAAO,OAAnC,GADoB;AAAA,aAArB;AApBH;AAFF;AADF,OADF;AA+BD;;;;EA3M4BsE,gB;;kBA8MhBvF,gB","file":"FileUploadWidget.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { FilePond, File, registerPlugin } from 'react-filepond';\n\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\n\nregisterPlugin(\n  FilePondPluginImageExifOrientation,\n  FilePondPluginImagePreview,\n  FilePondPluginFileValidateSize\n);\n\nimport crypto from 'crypto';\nimport uuid from 'uuid';\n\nconst endpoint = process.env.API_URL;\n\nclass FileUploadWidget extends Component {\n  constructor(props) {\n    super(props);\n      const uniqueid = crypto.createHmac('sha256', uuid.v4()).digest('hex');\n      this.state = {\n        uniqueIdentifier: uniqueid,\n        files: [],\n        fileList: [],\n      };\n\n      this.fileList = [];\n\n      this.filesUpdated = this.filesUpdated.bind(this);\n  }\n\n  handleInit() {\n    console.log('FilePond instance has initialised.');\n  }\n\n  handleProcessing(fieldName, file, metadata, load, error, progress, abort) {\n    // fieldName is the name of the input field\n    // file is the actual file object to send\n    const formData = new FormData();\n\n    // First, find the S3 signature data from this.state.fileList\n\n    let fileSignature = this.getFileSignatureFromList(file);\n    let fields = [];\n\n    if (fileSignature == null) {\n      console.log('The file signature for file could not be located.');\n    }\n\n    try {\n      fields = Object.keys(fileSignature['fields']);\n    } catch (error) {\n      fields = [];\n      console.log(\"Error: \");\n      console.log(error);\n    }\n\n    for (const key of fields) {\n      formData.append(key, fileSignature['fields'][key]);\n    }\n\n    formData.append('file', file, fileSignature['fields']['key']);\n\n    const request = new XMLHttpRequest();\n\n    request.open('POST', fileSignature['url']);\n\n    // Should call the progress method to update the progress to 100% before calling load\n    // Setting computable to false switches the loading indicator to infinite mode\n    request.upload.onprogress = e => {\n      progress(e.lengthComputable, e.loaded, e.total);\n    };\n\n    // Should call the load method when done and pass the returned server file id\n    // this server file id is then used later on when reverting or restoring a file\n    // so your server knows which file to return without exposing that info to the client\n    request.onload = function() {\n      if (request.status >= 200 && request.status < 300) {\n        // the load method accepts either a string (id) or an object\n        load(request.responseText);\n      } else {\n        // Can call the error method if something is wrong, should exit after\n        error('oh no');\n      }\n    };\n\n    request.send(formData);\n\n    // Should expose an abort method so the request can be cancelled\n    return {\n      abort: () => {\n        // This function is entered if the user has tapped the cancel button\n        request.abort();\n\n        // Let FilePond know the request has been cancelled\n        abort();\n      }\n    };\n  }\n\n  withQuery(url, params) {\n    let query = Object.keys(params)\n      .filter(k => params[k] !== undefined)\n      .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n      .join('&');\n    url += (url.indexOf('?') === -1 ? '?' : '&') + query;\n    return url;\n  }\n\n  parseSignatureResponse(res) {\n    this.fileList.push(res);\n\n    let value = false;\n\n    try {\n      value = this.fileList.length\n        ? JSON.stringify(this.fileList.map(f => `${f.creds.fields.key}`))\n        : false;\n    } catch(error) {\n      console.log(\"parseSignatureResponse() Error: \");\n      console.log(error);\n      value = false;\n    }\n\n    this.props.onChange(value);\n\n    this.setState({\n      fileList: [...this.fileList],\n    });\n  }\n\n  retrieveFileSignature (key, uniqueIdentifier) {\n    var formData = new FormData();\n\n    formData.append('key', key);\n    formData.append('uniqueid', uniqueIdentifier);\n\n    fetch(this.withQuery(endpoint + \"/uploads/request-signature\", {\n      file: key,\n      uniqueid: uniqueIdentifier.toLowerCase()\n    }))\n    .then(res => res.json())\n    .catch(error => console.error('Error:', error))\n    .then(res => {\n      this.parseSignatureResponse(res);\n    })\n  }\n\n  handleFileAdded(error, file) {\n    this.retrieveFileSignature(file.filename, this.state.uniqueIdentifier);\n  }\n\n  handleRemoveFile(file) {\n    for (let i in this.fileList) {\n      let currentFile = this.fileList[i];\n      if (currentFile['filename'] === file.filename) {\n        console.log('Removing: ' + file.filename + ' at index: ' + i);\n        this.fileList.splice(i, 1);\n        this.setState({\n          fileList: [...this.fileList],\n        });\n      }\n    }\n  }\n\n  getFileSignatureFromList(file) {\n    let uploadedFileName = file.name || '';\n\n    for (let i in this.fileList) {\n      let currentFile = this.fileList[i];\n      if (currentFile['filename'] === uploadedFileName) {\n        console.log('getFileSignatureFromList() Item found at index: ' + i);\n        let creds = this.fileList[i]['creds'];\n        return creds;\n      }\n    }\n    // If not found, return null\n    return null;\n  }\n\n  filesUpdated({ fileItems }) {\n    // Set current file objects to this.state\n    this.setState({\n      files: fileItems.map(fileItem => fileItem.file),\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          {/* // Then we need to pass FilePond properties as attributes */}\n          <FilePond\n            ref={ref => (this.pond = ref)}\n            allowMultiple={true}\n            allowFileSizeValidation={true}\n\n            maxFiles={100}\n            maxFileSize=\"20000MB\"\n\n            /* FilePond allows a custom process to handle uploads */\n            server={{\n              process: this.handleProcessing.bind(this),\n            }}\n            oninit={() => this.handleInit()}\n            /* OnAddFile we are going to request a token for that file, and update a dictionary with the tokens */\n            onaddfile={(error, file) => this.handleFileAdded(error, file)}\n            /* OnRemoveFile we are going to find the file in the list and splice it (remove it) */\n            onremovefile={file => this.handleRemoveFile(file)}\n            onupdatefiles={fileItems => this.filesUpdated({ fileItems })}\n          >\n            {/* Update current files  */}\n            {this.state.files.map(file => (\n              <File key={file} src={file} origin=\"local\" />\n            ))}\n          </FilePond>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default FileUploadWidget;\n"]}