{"version":3,"sources":["../../../../src/js/widgets/SelectLocation/SelectLocationWidget.jsx"],"names":["HERE_APP_ID","HERE_APP_CODE","MAPBOX_TOKEN","GEOCODE_DEBUG","Map","accessToken","geocoderControl","MapboxGeocoder","placeholder","bbox","limit","trackProximity","SelectLocationWidget","props","locationUpdated","bind","onChange","onStyleLoad","onMoveEnd","onDragStart","onDragEnd","onForwardGeocodeResult","onGeocoderClear","location","value","JSON","parse","address","position","lng","lat","state","center","showPin","geocodeAddressString","formValue","geocodeResult","result","place_name","setState","map","getCenter","lngLat","addressString","newFormValue","dragRotate","disable","touchZoomRotate","disableRotation","zoomControl","NavigationControl","addControl","on","updateGeocoderProximity","getZoom","wrap","setProximity","longitude","latitude","setCenter","resize","locationJSON","stringify","setInput","mapboxURL","hereURL","fetch","then","provider","response","status","console","error","json","mapboxAddress","data","features","info","hereAddress","Response","View","Result","Location","Address","Label","passGeocodedResult","reverseGeocode","pinDrop","Component"],"mappings":"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","file":"SelectLocationWidget.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { NavigationControl } from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nconst HERE_APP_ID = 'R3EtGwWQmTKG5eVeyLV8';\nconst HERE_APP_CODE = '8aDkNeOzfxGFkOKm9fER0A';\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiY3Jvd2VhdHgiLCJhIjoiY2o1NDFvYmxkMHhkcDMycDF2a3pseDFpZiJ9.UcnizcFDleMpv5Vbv8Rngw';\nconst GEOCODE_DEBUG = false;\n\nconst Map = ReactMapboxGl({\n  accessToken: MAPBOX_TOKEN\n});\n\nconst geocoderControl = new MapboxGeocoder({\n  accessToken: MAPBOX_TOKEN,\n  placeholder: 'Enter a location here',\n\n  // bounding box restricts results to Travis County\n  bbox: [-98.173053, 30.02329, -97.369564, 30.627918],\n  // or texas\n  // bbox: [65,25.84,-93.51,36.5],\n  // or by country:\n  // countries: 'us',\n  limit: 5,\n  trackProximity: true\n});\n\nexport default class SelectLocationWidget extends Component {\n  constructor(props) {\n    super(props);\n\n    this.locationUpdated = this.locationUpdated.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onStyleLoad = this.onStyleLoad.bind(this);\n    this.onMoveEnd = this.onMoveEnd.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.onForwardGeocodeResult = this.onForwardGeocodeResult.bind(this);\n    this.onGeocoderClear = this.onGeocoderClear.bind(this);\n\n    // take location data from the form if it exists, or use a default\n    const location = props.value\n      ? JSON.parse(props.value)\n      : {\n        address: 'default',\n        position: {\n          lng: null,\n          lat: null\n        }\n      };\n\n    this.state = {\n      center: [location.position.lng, location.position.lat],\n      showPin: true,\n      geocodeAddressString: location.address,\n      formValue: props.value || ''\n    };\n  }\n\n  onForwardGeocodeResult(geocodeResult) {\n    const address = geocodeResult.result.place_name;\n    this.setState({ geocodeAddressString: address });\n  }\n\n  onDragStart() {\n    this.setState({\n      showPin: false\n    });\n  }\n\n  onDragEnd() {\n    this.setState({\n      geocodeAddressString: null,\n      showPin: true\n    });\n  }\n\n  onMoveEnd(map) {\n    const center = map.getCenter();\n    this.locationUpdated({ lngLat: center, addressString: this.state.geocodeAddressString });\n  }\n\n  // calls us-forms-system onChange to propogate values up to the form\n  onChange(newFormValue) {\n    this.props.onChange(newFormValue);\n    this.setState({ formValue: newFormValue });\n  }\n\n  onGeocoderClear() {\n    this.onChange({});\n  }\n\n  onStyleLoad(map) {\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n\n    const zoomControl = new NavigationControl();\n    map.addControl(zoomControl, 'bottom-right');\n    map.addControl(geocoderControl, 'top-left');\n\n    geocoderControl.on('result', this.onForwardGeocodeResult);\n\n    geocoderControl.on('clear', this.onGeocoderClear);\n\n    function updateGeocoderProximity() {\n      // proximity is designed for local scale, if the user is looking at the whole world,\n      // it doesn't make sense to factor in the arbitrary centre of the map\n      if (map.getZoom() > 9) {\n        const center = map.getCenter().wrap(); // ensures the longitude falls within -180 to 180 as the Geocoding API doesn't accept values outside this range\n        geocoderControl.setProximity({\n          longitude: center.lng,\n          latitude: center.lat\n        });\n      } else {\n        geocoderControl.setProximity(null);\n      }\n    }\n\n    map.on('load', updateGeocoderProximity); // set proximity on map load\n    map.on('moveend', updateGeocoderProximity); // and then update proximity each time the map moves\n\n    // set initial center\n    map.setCenter([-97.7460479736328, 30.266184073558826]);\n    map.resize();\n  }\n\n  // prepare geocoded result to be propogated to form\n  passGeocodedResult({ lngLat, addressString }) {\n    const location = {\n      address: addressString === 'default' ? null : addressString,\n      position: lngLat\n    };\n    const locationJSON = JSON.stringify(location);\n\n    // update the geocoder input box with the address label\n    if (addressString !== 'default') {\n      this.onChange(locationJSON);\n      geocoderControl.setInput(location.address);\n    }\n  }\n\n  reverseGeocode({ lngLat }) {\n    // eslint-disable-next-line no-unused-vars\n    const mapboxURL = `https://api.mapbox.com/geocoding/v5/mapbox.places/${lngLat.lng}%2C${lngLat.lat}.json?access_token=${MAPBOX_TOKEN}`;\n    // eslint-disable-next-line no-unused-vars\n    const hereURL = `https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?prox=${lngLat.lat}%2C${lngLat.lng}%2C250&mode=retrieveAddresses&maxresults=1&gen=9&app_id=${HERE_APP_ID}&app_code=${HERE_APP_CODE}`;\n    if (GEOCODE_DEBUG) {\n      fetch(mapboxURL).then(response => {\n        const provider = 'mapbox: ';\n        if (response.status !== 200) {\n          console.error(`Looks like there was a problem. Status Code: ${response.status}`);\n          return;\n        }\n\n        response.json().then(data => {\n          const mapboxAddress = data.features[0].place_name;\n          console.info(provider + JSON.stringify(data));\n          console.info(mapboxAddress);\n        });\n      });\n\n      fetch(hereURL).then(response => {\n        const provider = 'HERE: ';\n        if (response.status !== 200) {\n          console.error(`Looks like there was a problem. Status Code: ${response.status}`);\n          return;\n        }\n\n        response.json().then(data => {\n          const hereAddress = data.Response.View[0].Result[0].Location.Address.Label;\n          console.info(provider + JSON.stringify(data));\n          console.info(hereAddress);\n        });\n      });\n    }\n    fetch(mapboxURL).then(response => {\n      if (response.status !== 200) {\n        console.error(`Looks like there was a problem. Status Code: ${response.status}`);\n        const address = 'Dropped Pin';\n        this.passGeocodedResult({ lngLat, addressString: address });\n        return;\n      }\n\n      response.json().then(data => {\n        const hereAddress = data.Response.View[0].Result[0].Location.Address.Label;\n        const address = hereAddress;\n        this.passGeocodedResult({ lngLat, addressString: address });\n      });\n    });\n  }\n\n  locationUpdated({ lngLat, addressString }) {\n    // If we have an address string, skip calling the reverse geocoder\n    if (addressString) {\n      this.passGeocodedResult({ lngLat, addressString });\n      return;\n    }\n\n    this.reverseGeocode({ lngLat });\n  }\n\n  render() {\n    const pinDrop = this.state.showPin ? 'show' : 'hide';\n\n    return (\n      <div>\n        <div className=\"map-container\">\n          <Map\n            // eslint-disable-next-line react/style-prop-object\n            style={'mapbox://styles/croweatx/cjow5d6cd3l7g2snrvf17wf0r'}\n            onStyleLoad={this.onStyleLoad}\n            onDragStart={this.onDragStart}\n            onDragEnd={this.onDragEnd}\n            onMoveEnd={this.onMoveEnd}>\n            <div className={`pin ${pinDrop}`}/>\n            <div className=\"pulse\"/>\n          </Map>\n        </div>\n      </div>\n    );\n  }\n}\n"]}