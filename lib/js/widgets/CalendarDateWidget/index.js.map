{"version":3,"sources":["../../../../src/js/widgets/CalendarDateWidget/index.jsx"],"names":["CalendarDateWidget","props","state","value","touched","month","day","year","onChange","bind","handleFormChange","handleFlatpickrChange","dates","datestring","field","currentYear","Date","getFullYear","newState","formatter","formatYear","formatDayMonth","setState","isIncomplete","dateString","id","flatpickrDate","undefined","event","target","dateFormat","maxDate","wrap","allowInput","enableTime","React","Component","propTypes","PropTypes","string","isRequired","func"],"mappings":"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","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport Flatpickr from 'react-flatpickr';\nimport { set, cloneDeep } from 'lodash';\n\nimport { formatYear, formatDayMonth, parseISODate, formatISOPartialDate } from './dateHelpers';\n\n// Returns datestring in the form \"2011-11-11\"\n// Uses parts of us-form-system's DateWidget.jsx. Includes a Calendar date picker.\nexport default class CalendarDateWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: parseISODate(this.props.value),\n      touched: {\n        month: false,\n        day: false,\n        year: false,\n      },\n    };\n    this.onChange = this.onChange.bind(this);\n    this.handleFormChange = this.handleFormChange.bind(this);\n    this.handleFlatpickrChange = this.handleFlatpickrChange.bind(this);\n  }\n\n  onChange({ dates, datestring }) {\n    this.props.onChange(datestring);\n  }\n\n  isIncomplete({ month, day, year }) {\n    return (!month || !day || !year);\n  }\n\n  handleFormChange(field, value) {\n    const currentYear = (new Date()).getFullYear();\n\n    if (field === 'month') {\n      if ((value > 12)) {\n        return;\n      }\n      if (value < 1) {\n        value = '';\n      }\n    }\n    if (field === 'day') {\n      if (value > 31) {\n        return;\n      }\n      if (value < 1) {\n        value = '';\n      }\n    }\n    if (field === 'year') {\n      if (value > currentYear) {\n        value = currentYear;\n      }\n      if (value < 1) {\n        value = '';\n      }\n    }\n\n    const newState = cloneDeep(this.state);\n    const formatter = (field === 'year') ? formatYear : formatDayMonth;\n\n    set(newState, ['value', field], formatter(value));\n    set(newState, ['touched', field], true);\n\n    // Autofill year after filling month and day\n    if (\n      (\n        ((field === 'day') && (!!this.state.value.month)) ||\n        ((field === 'month') && (!!this.state.value.day))\n      ) && (this.state.value.year === '')\n    ) {\n      set(newState, ['value', 'year'], currentYear);\n    }\n\n    this.setState(newState, () => {\n      if (this.isIncomplete(newState.value)) {\n        this.props.onChange();\n      } else {\n        this.props.onChange(formatISOPartialDate(newState.value));\n      }\n    });\n  }\n\n  handleFlatpickrChange(dateString) {\n    const newState = cloneDeep(this.state);\n    set(newState, 'value', parseISODate(dateString));\n    set(newState, 'touched', { month: true, day: true, year: true });\n\n    this.setState(newState, () => {\n      if (this.isIncomplete(newState.value)) {\n        this.props.onChange();\n      } else {\n        this.props.onChange(formatISOPartialDate(newState.value));\n      }\n    });\n  }\n\n  render() {\n    const { id } = this.props;\n    const { month, day, year } = this.state.value;\n    const flatpickrDate = (month && day && year) ?\n      formatISOPartialDate({ month, day, year }) : undefined;\n\n    // <span> state date: {formatISOPartialDate({month,day,year})} </span><br/>\n    return (\n      <div className=\"date-widget-container\">\n\n        <div className=\"date-widget-values-container\">\n          <fieldset className=\"date-fieldset\" id={id}>\n            <div className=\"usa-date-of-birth\">\n              <div className=\"usa-datefield usa-form-group usa-form-group-month\">\n                <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Month`}>Month</label>\n                <input\n                  className=\"usa-input-inline\" id={`${id}_Month`} name={`${id}_Month`}\n                  type=\"number\" min=\"1\" max=\"12\" value={month}\n                  onChange={(event) => this.handleFormChange('month', event.target.value)}/>\n              </div>\n              <div className=\"usa-datefield usa-form-group usa-form-group-day\">\n                <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Day`}>Day</label>\n                <input\n                  className=\"usa-input-inline\" id={`${id}_Day`} name={`${id}_Day`}\n                  type=\"number\" min=\"1\" max=\"31\" value={day}\n                  onChange={(event) => this.handleFormChange('day', event.target.value)}/>\n              </div>\n              <div className=\"usa-datefield usa-form-group usa-form-group-year usa-form-group-year-fix\">\n                <label className=\"input-date-label smaller-input\" htmlFor={`${id}_Year`}>Year</label>\n                <input\n                  className=\"usa-input-inline\" id={`${id}_Year`} name={`${id}_Year`}\n                  type=\"number\" min=\"1900\" value={year}\n                  onChange={(event) => this.handleFormChange('year', event.target.value)}/>\n              </div>\n              <div aria-hidden className=\"usa-datefield usa-form-group flatpickr-container\">\n                <Flatpickr\n                  options={{\n                    dateFormat: 'Y-m-d',\n                    maxDate: 'today',\n                    wrap: true,\n                    allowInput: false,\n                    enableTime: false,\n                  }}\n                  value={flatpickrDate}\n                  onChange={(dates, datestring) => this.handleFlatpickrChange(datestring)}>\n                  <label className=\"hidden-content\" htmlFor={`${id}_calendar`}>Calendar</label>\n                  <input className=\"hidden-flatpickr-input-box\" tabIndex=\"-1\" type=\"text\" data-input name={`${id}_calendar`} id={`${id}_calendar`}/>\n                  <span className=\"usa-input-inline flatpickr-input-button-container\" title=\"toggle\" data-toggle>\n                    <i className=\"material-icons flatpickr-input-button\">event</i>\n                  </span>\n                </Flatpickr>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </div>\n    );\n  }\n}\n\nCalendarDateWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string\n};\n"]}