{"version":3,"sources":["../../../../src/js/widgets/SelectLocation/SelectLocationWidget.jsx"],"names":["MapboxGl","MapboxGeocoder","require","Map","accessToken","geocoderControl","placeholder","bbox","limit","trackProximity","HERE_APP_ID","HERE_APP_CODE","SelectLocationMap","props","state","center","showPin","onStyleLoad","bind","onMoveEnd","onDragStart","prevProps","lat","lng","setState","map","getCenter","locationUpdated","lngLat","zoomControl","NavigationControl","addControl","dragRotate","disable","touchZoomRotate","disableRotation","addSource","type","data","features","addLayer","id","source","paint","on","event","getSource","setData","result","geometry","updateGeocoderProximity","getZoom","wrap","setProximity","longitude","latitude","resize","pinDrop","Component","SelectLocationWidget","onChange","getCurrentPosition","newValue","valueJSON","value","schema","formData","location","JSON","parse","newLocation","address","position","newValueJSON","stringify","window","navigator","geolocation","coords","enableHighAccuracy","fetch","then","response","status","console","error","json","Response","View","Result","Location","Address","Label","setInput","React"],"mappings":"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","file":"SelectLocationWidget.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactMapboxGl, { Layer } from 'react-mapbox-gl';\nimport * as MapboxGl from 'mapbox-gl';\n\n// importing the geocoder didnt seem to work at first\nconst MapboxGeocoder = require('@mapbox/mapbox-gl-geocoder');\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiY3Jvd2VhdHgiLCJhIjoiY2o1NDFvYmxkMHhkcDMycDF2a3pseDFpZiJ9.UcnizcFDleMpv5Vbv8Rngw',\n});\n\nconst geocoderControl = new MapboxGeocoder({\n  accessToken:\n    'pk.eyJ1IjoiY3Jvd2VhdHgiLCJhIjoiY2o1NDFvYmxkMHhkcDMycDF2a3pseDFpZiJ9.UcnizcFDleMpv5Vbv8Rngw',\n  placeholder: 'Enter a location here',\n\n  // bounding box restricts results to Travis County\n  bbox: [-98.173053, 30.02329, -97.369564, 30.627918],\n  // or texas\n  // bbox: [65,25.84,-93.51,36.5],\n  // or by country:\n  // countries: 'us',\n  limit: 5,\n  trackProximity: true,\n});\n\nconst HERE_APP_ID = 'R3EtGwWQmTKG5eVeyLV8';\nconst HERE_APP_CODE = '8aDkNeOzfxGFkOKm9fER0A';\n\nclass SelectLocationMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: [-97.7460479736328, 30.266184073558826],\n      showPin: true,\n    };\n    this.onStyleLoad = this.onStyleLoad.bind(this);\n    this.onMoveEnd = this.onMoveEnd.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.lat !== prevProps.lat || this.props.lng !== prevProps.lng) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        showPin: true,\n      });\n    }\n  }\n\n  onDragStart() {\n    // debugger;\n    this.setState({\n      showPin: false,\n    });\n  }\n\n  onMoveEnd(map) {\n    const center = map.getCenter();\n    this.props.locationUpdated({ lngLat: center });\n  }\n\n  onStyleLoad(map) {\n    const zoomControl = new MapboxGl.NavigationControl();\n\n    map.addControl(zoomControl, 'bottom-right');\n\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n\n    map.addSource('geojson-point', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [],\n      },\n    });\n\n    map.addLayer({\n      id: 'geocoded-point',\n      source: 'geojson-point',\n      type: 'circle',\n      paint: {\n        'circle-radius': 10,\n        'circle-color': '#007cbf',\n      },\n    });\n\n    map.addControl(geocoderControl, 'top-left');\n\n    // using mapbox geocoder's event listener to show result\n    // this ought to be linked up with or replace previous code\n    geocoderControl.on('result', (event) => {\n      map.getSource('geojson-point').setData(event.result.geometry);\n    });\n\n    function updateGeocoderProximity() {\n      // proximity is designed for local scale, if the user is looking at the whole world,\n      // it doesn't make sense to factor in the arbitrary centre of the map\n      if (map.getZoom() > 9) {\n        const center = map.getCenter().wrap(); // ensures the longitude falls within -180 to 180 as the Geocoding API doesn't accept values outside this range\n        geocoderControl.setProximity({\n          longitude: center.lng,\n          latitude: center.lat,\n        });\n      } else {\n        geocoderControl.setProximity(null);\n      }\n    }\n\n    map.on('load', updateGeocoderProximity); // set proximity on map load\n    map.on('moveend', updateGeocoderProximity); // and then update proximity each time the map moves\n\n    map.resize();\n  }\n\n  toggleMenu() {\n    this.setState({\n      showPin: !this.state.showPin,\n    });\n  }\n\n\n  render() {\n    const { lat, lng } = this.props;\n    const pinDrop = this.state.showPin ? 'show' : 'hide';\n\n    return (\n      <Map\n        // eslint-disable-next-line react/style-prop-object\n        style={'mapbox://styles/croweatx/cjow5d6cd3l7g2snrvf17wf0r'}\n        center={[lng, lat]}\n        onStyleLoad={this.onStyleLoad}\n        onDragStart={this.onDragStart}\n        onMoveEnd={this.onMoveEnd}>\n        <Layer\n          type=\"symbol\"\n          id=\"selectedLocation\"\n          layout={{\n            'icon-image': 'marker-open-small',\n            'icon-allow-overlap': true,\n          }}>\n          {/*\n          <Feature\n            coordinates={[lng, lat]}\n            draggable={true}\n            onMoveEnd={this.props.locationUpdated}\n          /> */}\n        </Layer>\n\n        <div className={`pin ${pinDrop}`}/>\n        <div className=\"pulse\"/>\n      </Map>\n    );\n  }\n}\n\n\nexport default class SelectLocationWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.locationUpdated = this.locationUpdated.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.getCurrentPosition = this.getCurrentPosition.bind(this);\n  }\n\n  onChange(event, { newValue }) {\n    // Keep our current location until we pick a suggestion\n    const valueJSON = this.props.value\n      ? this.props.value\n      : this.props.schema.formData;\n    const location = JSON.parse(valueJSON);\n\n    const newLocation = {\n      address: newValue,\n      position: location.position,\n    };\n\n    const newValueJSON = JSON.stringify(newLocation);\n\n    this.props.onChange(newValueJSON);\n  }\n\n  getCurrentPosition() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        const lngLat = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n\n        this.locationUpdated({ lngLat });\n      },\n      { enableHighAccuracy: true },\n    );\n  }\n\n  locationUpdated({ lngLat }) {\n    let address = 'Dropped Pin';\n\n    // Use here reverse geocoding to get a human readable address for the pin\n    fetch(`\n      https://reverse.geocoder.api.here.com/6.2/reversegeocode.json?prox=${\n  lngLat.lat\n}%2C${\n  lngLat.lng\n}%2C250&mode=retrieveAddresses&maxresults=1&gen=9&app_id=${HERE_APP_ID}&app_code=${HERE_APP_CODE}`).then(\n      response => {\n        if (response.status !== 200) {\n          console.error(\n            `Looks like there was a problem. Status Code: ${response.status}`,\n          );\n\n          const location = {\n            address,\n            position: lngLat,\n          };\n\n          const valueJSON = JSON.stringify(location);\n\n          this.props.onChange(valueJSON);\n\n          return;\n        }\n\n        response.json().then(data => {\n          address = data.Response.View[0].Result[0].Location.Address.Label;\n\n          const location = {\n            address,\n            position: lngLat,\n          };\n\n          const valueJSON = JSON.stringify(location);\n          geocoderControl.setInput(location.address);\n          this.props.onChange(valueJSON);\n        });\n      },\n    );\n  }\n\n  render() {\n    const valueJSON = this.props.value\n      ? this.props.value\n      : this.props.schema.formData;\n    const location = JSON.parse(valueJSON);\n\n    return (\n      <div>\n        <div className=\"map-container\">\n          <SelectLocationMap\n            lat={location.position.lat}\n            lng={location.position.lng}\n            locationUpdated={this.locationUpdated}/>\n        </div>\n      </div>\n    );\n  }\n}\n"]}